// Patched version that uses our custom proxy models
import { Global } from "../global"
import { Log } from "../util/log"
import path from "path"
import { z } from "zod"
import proxyModels from "../proxy-models.json"

export namespace ModelsDev {
  const log = Log.create({ service: "models.dev" })

  export const Model = z
    .object({
      id: z.string(),
      name: z.string(),
      release_date: z.string(),
      attachment: z.boolean(),
      reasoning: z.boolean(),
      temperature: z.boolean(),
      tool_call: z.boolean(),
      cost: z.object({
        input: z.number(),
        output: z.number(),
        cache_read: z.number().optional(),
        cache_write: z.number().optional(),
      }),
      limit: z.object({
        context: z.number(),
        output: z.number(),
      }),
      options: z.record(z.any()),
    })
    .openapi({
      ref: "Model",
    })
  export type Model = z.infer<typeof Model>

  export const Provider = z
    .object({
      api: z.string().optional(),
      name: z.string(),
      env: z.array(z.string()),
      id: z.string(),
      npm: z.string().optional(),
      models: z.record(Model),
    })
    .openapi({
      ref: "Provider",
    })

  export type Provider = z.infer<typeof Provider>

  export async function get() {
    // Always return our custom proxy models
    log.info("Using custom proxy models configuration")
    return proxyModels as Record<string, Provider>
  }

  export async function refresh() {
    // No-op - we don't want to fetch from models.dev
    log.info("Skipping models refresh - using static proxy configuration")
  }
}
