#!/usr/bin/env python3
"""
Test script for MCP Server
Tests all available tools and validates responses
"""

import sys
import time
from typing import Any, Dict

import requests


class MCPServerTester:
    """Test harness for MCP Server"""

    def __init__(self, base_url: str = "http://localhost:8005"):
        self.base_url = base_url
        self.results = {"passed": 0, "failed": 0, "errors": []}

    def test_endpoint(self, method: str, path: str, data: Dict[str, Any] = None) -> Dict[str, Any]:
        """Test an endpoint"""
        url = f"{self.base_url}{path}"

        try:
            if method == "GET":
                response = requests.get(url)
            elif method == "POST":
                response = requests.post(url, json=data)
            else:
                raise ValueError(f"Unsupported method: {method}")

            return {
                "status_code": response.status_code,
                "data": response.json() if response.content else None,
                "success": response.status_code == 200,
            }
        except Exception as e:
            return {"status_code": 0, "data": None, "success": False, "error": str(e)}

    def print_test_result(self, test_name: str, result: Dict[str, Any]):
        """Print test result"""
        if result["success"]:
            print(f"✅ {test_name}")
            self.results["passed"] += 1
        else:
            print(f"❌ {test_name}")
            self.results["failed"] += 1
            self.results["errors"].append(
                {
                    "test": test_name,
                    "error": result.get("error", f"Status code: {result['status_code']}"),
                }
            )

    def run_tests(self):
        """Run all tests"""
        print("🧪 Testing MCP Server")
        print("=" * 50)

        # Test 1: Root endpoint
        print("\n1. Testing root endpoint...")
        result = self.test_endpoint("GET", "/")
        self.print_test_result("Root endpoint", result)
        if result["success"]:
            server_name = result["data"].get("name")
            server_version = result["data"].get("version")
            print(f"   Server: {server_name} v{server_version}")

        # Test 2: Health check
        print("\n2. Testing health check...")
        result = self.test_endpoint("GET", "/health")
        self.print_test_result("Health check", result)

        # Test 3: List tools
        print("\n3. Testing tool listing...")
        result = self.test_endpoint("GET", "/tools")
        self.print_test_result("List tools", result)
        if result["success"]:
            tools = result["data"]
            print(f"   Available tools: {', '.join(tools.keys())}")

        # Test 4: Format check tool
        print("\n4. Testing format_check tool...")
        result = self.test_endpoint(
            "POST",
            "/tools/execute",
            {"tool": "format_check", "arguments": {"path": ".", "language": "python"}},
        )
        self.print_test_result("Format check tool", result)

        # Test 5: Lint tool
        print("\n5. Testing lint tool...")
        result = self.test_endpoint("POST", "/tools/execute", {"tool": "lint", "arguments": {"path": "."}})
        self.print_test_result("Lint tool", result)

        # Test 6: LaTeX compilation
        print("\n6. Testing LaTeX compilation...")
        latex_content = r"""
\documentclass{article}
\begin{document}
\title{Test Document}
\author{MCP Server}
\maketitle
\section{Introduction}
This is a test document generated by MCP Server.
\end{document}
        """
        result = self.test_endpoint(
            "POST",
            "/tools/execute",
            {
                "tool": "compile_latex",
                "arguments": {"content": latex_content, "format": "pdf"},
            },
        )
        self.print_test_result("LaTeX compilation", result)

        # Test 7: Manim animation
        print("\n7. Testing Manim animation...")
        manim_script = """
from manim import *

class TestScene(Scene):
    def construct(self):
        text = Text("MCP Server Test")
        self.play(Write(text))
        self.wait()
        """
        result = self.test_endpoint(
            "POST",
            "/tools/execute",
            {
                "tool": "create_manim_animation",
                "arguments": {"script": manim_script, "output_format": "mp4"},
            },
        )
        self.print_test_result("Manim animation", result)

        # Test 8: Invalid tool
        print("\n8. Testing error handling...")
        result = self.test_endpoint("POST", "/tools/execute", {"tool": "invalid_tool", "arguments": {}})
        expected_fail = result["status_code"] == 404
        self.print_test_result("Error handling (expected failure)", {"success": expected_fail})

        # Print summary
        print("\n" + "=" * 50)
        print("📊 Test Summary")
        print(f"   Passed: {self.results['passed']}")
        print(f"   Failed: {self.results['failed']}")

        if self.results["errors"]:
            print("\n❌ Errors:")
            for error in self.results["errors"]:
                print(f"   - {error['test']}: {error['error']}")

        return self.results["failed"] == 0


def main():
    """Main test function"""
    # Check if server URL is provided
    server_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8005"

    # Wait for server to be ready
    print(f"🔄 Waiting for MCP server at {server_url}...")
    max_retries = 30
    for i in range(max_retries):
        try:
            response = requests.get(f"{server_url}/health", timeout=1)
            if response.status_code == 200:
                print("✅ Server is ready!")
                break
        except Exception:
            pass

        if i == max_retries - 1:
            print("❌ Server is not responding")
            sys.exit(1)

        time.sleep(1)
        sys.stdout.write(".")
        sys.stdout.flush()

    print("\n")

    # Run tests
    tester = MCPServerTester(server_url)
    success = tester.run_tests()

    # Exit with appropriate code
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
