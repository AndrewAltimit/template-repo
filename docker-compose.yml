
services:
  # Code Quality MCP Server
  mcp-code-quality:
    build:
      context: .
      dockerfile: docker/mcp-code-quality.Dockerfile
    container_name: mcp-code-quality
    ports:
      - "8010:8010"
    volumes:
      - ./tools/mcp:/app/tools/mcp
      - ./output:/app/output
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - MCP_CODE_QUALITY_PORT=8010
    networks:
      - mcp-network
    restart: unless-stopped
    command: python -m tools.mcp.code_quality.server --mode http

  # Content Creation MCP Server (Manim & LaTeX)
  mcp-content-creation:
    build:
      context: .
      dockerfile: docker/mcp-content.Dockerfile
    container_name: mcp-content-creation
    ports:
      - "8011:8011"
    volumes:
      - ./tools/mcp:/app/tools/mcp
      - ./output:/app/output
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - MCP_CONTENT_PORT=8011
    networks:
      - mcp-network
    restart: unless-stopped
    command: python -m tools.mcp.content_creation.server --mode http

  # Gaea2 MCP Server (without CLI features - those require Windows host)
  mcp-gaea2:
    build:
      context: .
      dockerfile: docker/mcp-gaea2.Dockerfile
    container_name: mcp-gaea2
    ports:
      - "8007:8007"
    volumes:
      - ./tools/mcp:/app/tools/mcp
      - ./output:/app/output
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - MCP_GAEA2_PORT=8007
    networks:
      - mcp-network
    restart: unless-stopped
    command: python -m tools.mcp.gaea2.server --mode http

  # NOTE: Some MCP servers MUST run on the host system, not in containers:
  #
  # 1. Gemini MCP Server (port 8006) - Needs Docker access for Gemini CLI
  #    Run with: python -m tools.mcp.gemini.server --mode http
  #    Or use: ./tools/mcp/gemini/scripts/start_server.sh
  #
  # 2. Gaea2 MCP Server with CLI features - Needs Windows Gaea2 executable
  #    The containerized version above only provides project creation/validation
  #    For CLI automation, run on Windows host with:
  #    python -m tools.mcp.gaea2.server --gaea-path "C:\Path\To\Gaea.Swarm.exe"
  #
  # These servers check if they're in a container and provide instructions.

  # ComfyUI MCP HTTP Bridge (for remote ComfyUI)
  mcp-comfyui-http:
    build:
      context: .
      dockerfile: docker/mcp-http-bridge.Dockerfile
    container_name: mcp-comfyui-http
    ports:
      - "8189:8189"
    environment:
      - REMOTE_MCP_URL=${COMFYUI_SERVER_URL:-http://192.168.0.152:8189}
      - SERVICE_NAME=comfyui
    networks:
      - mcp-network
    restart: unless-stopped

  # AI Toolkit MCP HTTP Bridge (for remote AI Toolkit)
  mcp-ai-toolkit-http:
    build:
      context: .
      dockerfile: docker/mcp-http-bridge.Dockerfile
    container_name: mcp-ai-toolkit-http
    ports:
      - "8190:8190"
    environment:
      - REMOTE_MCP_URL=${AI_TOOLKIT_SERVER_URL:-http://192.168.0.152:8190}
      - SERVICE_NAME=ai-toolkit
    networks:
      - mcp-network
    restart: unless-stopped

  # Development Database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: project-db
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-project_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - mcp-network
    profiles:
      - development

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: project-cache
    ports:
      - "6379:6379"
    networks:
      - mcp-network
    profiles:
      - development

  # CI/CD Python container
  python-ci:
    build:
      context: .
      dockerfile: docker/python-ci.Dockerfile
    container_name: python-ci
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      - HOME=/tmp
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    networks:
      - mcp-network
    profiles:
      - ci

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
