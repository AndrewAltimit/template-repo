name: Lint Stages (dynamic)

on:
  workflow_call:
    inputs:
      stage:
        description: 'Linting stage to run (format, basic, full)'
        required: true
        type: string
      upload_artifacts:
        description: 'Upload lint results as artifacts'
        required: false
        type: boolean
        default: true
    outputs:
      status:
        description: 'Linting status'
        value: ${{ jobs.lint.outputs.status }}
      errors:
        description: 'Number of errors found'
        value: ${{ jobs.lint.outputs.errors }}
      warnings:
        description: 'Number of warnings found'
        value: ${{ jobs.lint.outputs.warnings }}

jobs:
  lint:
    name: Lint Stage - ${{ inputs.stage }}
    runs-on: self-hosted
    timeout-minutes: ${{ inputs.stage == 'format' && 5 || inputs.stage == 'basic' && 10 || 20 }}
    outputs:
      status: ${{ steps.result.outputs.status }}
      errors: ${{ steps.result.outputs.errors }}
      warnings: ${{ steps.result.outputs.warnings }}
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          
          case "${{ inputs.stage }}" in
            format)
              echo "Installing formatting tools..."
              pip install black isort
              ;;
            basic)
              echo "Installing basic linting tools..."
              pip install black isort flake8 pylint
              ;;
            full)
              echo "Installing full linting suite..."
              pip install black isort flake8 pylint mypy bandit safety
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
              ;;
          esac

      - name: Run linting stage
        id: lint
        shell: bash
        run: |
          # Initialize counters
          errors=0
          warnings=0
          
          case "${{ inputs.stage }}" in
            format)
              echo "=== Running format check ==="
              
              # Check Black formatting
              echo "🔍 Checking Python formatting with Black..."
              if ! black --check --diff . 2>&1 | tee black-output.txt; then
                errors=$((errors + $(grep -c "would reformat" black-output.txt || echo 0)))
              fi
              
              # Check import sorting
              echo "🔍 Checking import sorting with isort..."
              if ! isort --check-only --diff . 2>&1 | tee isort-output.txt; then
                errors=$((errors + $(grep -c "Fixing" isort-output.txt || echo 0)))
              fi
              ;;
              
            basic)
              echo "=== Running basic linting ==="
              
              # Format checks
              echo "🔍 Checking formatting..."
              black --check . 2>&1 | tee -a lint-output.txt || true
              isort --check-only . 2>&1 | tee -a lint-output.txt || true
              
              # Flake8 linting
              echo "🔍 Running Flake8..."
              flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics 2>&1 | tee -a lint-output.txt || errors=$((errors + 1))
              flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics 2>&1 | tee -a lint-output.txt
              
              # Count Flake8 issues
              flake8_errors=$(grep -E "^[^:]+:[0-9]+:[0-9]+: [EF][0-9]+" lint-output.txt | wc -l || echo 0)
              flake8_warnings=$(grep -E "^[^:]+:[0-9]+:[0-9]+: [WC][0-9]+" lint-output.txt | wc -l || echo 0)
              errors=$((errors + flake8_errors))
              warnings=$((warnings + flake8_warnings))
              
              # Pylint
              echo "🔍 Running Pylint..."
              find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | \
                xargs pylint --output-format=parseable --exit-zero 2>&1 | tee -a lint-output.txt || true
              
              # Count Pylint issues
              pylint_errors=$(grep -E ":[0-9]+: \[E[0-9]+.*\]" lint-output.txt | wc -l || echo 0)
              pylint_warnings=$(grep -E ":[0-9]+: \[W[0-9]+.*\]" lint-output.txt | wc -l || echo 0)
              errors=$((errors + pylint_errors))
              warnings=$((warnings + pylint_warnings))
              ;;
              
            full)
              echo "=== Running full linting suite ==="
              
              # All basic checks
              echo "🔍 Running all basic checks..."
              black --check . 2>&1 | tee -a lint-output.txt || true
              isort --check-only . 2>&1 | tee -a lint-output.txt || true
              flake8 . --count --statistics 2>&1 | tee -a lint-output.txt || true
              
              find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | \
                xargs pylint --output-format=parseable --exit-zero 2>&1 | tee -a lint-output.txt || true
              
              # Type checking with MyPy
              echo "🔍 Running MyPy type checker..."
              mypy . --ignore-missing-imports --no-error-summary 2>&1 | tee -a lint-output.txt || true
              mypy_errors=$(grep -c "error:" lint-output.txt || echo 0)
              errors=$((errors + mypy_errors))
              
              # Security scanning with Bandit
              echo "🔍 Running Bandit security scanner..."
              bandit -r . -f json -o bandit-report.json 2>&1 | tee -a lint-output.txt || true
              if [ -f bandit-report.json ]; then
                bandit_issues=$(python3 -c "import json; data=json.load(open('bandit-report.json')); print(len(data.get('results', [])))" || echo 0)
                warnings=$((warnings + bandit_issues))
              fi
              
              # Dependency security check with Safety
              echo "🔍 Checking dependency security..."
              if [ -f requirements.txt ]; then
                safety check --json --output safety-report.json 2>&1 | tee -a lint-output.txt || true
                if [ -f safety-report.json ]; then
                  safety_issues=$(python3 -c "import json; data=json.load(open('safety-report.json')); print(len(data))" || echo 0)
                  warnings=$((warnings + safety_issues))
                fi
              fi
              
              # Count all issues from lint-output.txt
              total_errors=$(grep -E "(error:|ERROR:|Error:)" lint-output.txt | wc -l || echo 0)
              total_warnings=$(grep -E "(warning:|WARNING:|Warning:)" lint-output.txt | wc -l || echo 0)
              errors=$((errors + total_errors))
              warnings=$((warnings + total_warnings))
              ;;
              
            *)
              echo "Invalid stage: ${{ inputs.stage }}"
              exit 1
              ;;
          esac
          
          # Set outputs
          echo "errors=$errors" >> $GITHUB_ENV
          echo "warnings=$warnings" >> $GITHUB_ENV
          
          # Summary
          echo ""
          echo "=== Linting Summary ==="
          echo "Errors: $errors"
          echo "Warnings: $warnings"
          
          # Fail if errors found in format or basic stages
          if [[ "${{ inputs.stage }}" != "full" && $errors -gt 0 ]]; then
            echo "❌ Linting failed with $errors errors"
            exit 1
          else
            echo "✅ Linting completed"
          fi

      - name: Parse results
        id: result
        if: always()
        shell: bash
        run: |
          # Get error and warning counts from environment
          errors="${errors:-0}"
          warnings="${warnings:-0}"
          
          echo "errors=$errors" >> $GITHUB_OUTPUT
          echo "warnings=$warnings" >> $GITHUB_OUTPUT
          echo "status=${{ job.status }}" >> $GITHUB_OUTPUT
          
          # Generate summary
          echo "## Lint Results - ${{ inputs.stage }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Errors | $errors |" >> $GITHUB_STEP_SUMMARY
          echo "| Warnings | $warnings |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ $errors -eq 0 && $warnings -eq 0 ]]; then
            echo "✅ No issues found!" >> $GITHUB_STEP_SUMMARY
          elif [[ $errors -eq 0 ]]; then
            echo "⚠️ No errors, but $warnings warnings found." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Found $errors errors and $warnings warnings." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload artifacts
        if: inputs.upload_artifacts && always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ inputs.stage }}-${{ github.run_id }}
          path: |
            lint-output.txt
            black-output.txt
            isort-output.txt
            bandit-report.json
            safety-report.json
          retention-days: 7
          if-no-files-found: ignore