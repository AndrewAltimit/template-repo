name: Issue Monitor Agent

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      force_reprocess:
        description: 'Force reprocess issues even if they have existing AI agent comments'
        required: false
        type: boolean
        default: false
  issues:
    types:
      - opened
      - edited
      - labeled

permissions:
  issues: write       # Required to comment on issues and read issue data
  pull-requests: write # Required to create pull requests
  contents: read      # For actions/checkout. Agent uses AI_AGENT_TOKEN with write perms.

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  monitor-issues:
    name: Monitor GitHub Issues
    runs-on: self-hosted
    # Only run if AI agents are enabled AND (manual trigger OR schedule OR issue event)
    # Note: User authorization is handled by the SecurityManager in the Python agent
    if: |
      vars.ENABLE_AI_AGENTS == 'true' && (
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'schedule' ||
        github.event_name == 'issues'
      )

    steps:
      - name: Security Check - Log Event Details
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "Issue Author: ${{ github.event.issue.user.login }}"
            echo "Issue Number: ${{ github.event.issue.number }}"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AI_AGENT_TOKEN }}

      - name: Configure Git
        run: |
          # Set git identity for the AI agent
          git config --global user.name "AI Issue Agent"
          git config --global user.email "ai-agent@localhost"

      - name: Set up Python environment
        run: |
          echo "[INFO] Checking Python environment..."
          python3 --version

          # Install required Python packages if not already installed
          # Using --user to avoid permission issues on self-hosted runners
          echo "[INFO] Installing required Python packages..."
          pip3 install --user -r docker/requirements-agents.txt

      - name: Run issue monitor on host
        env:
          # Use AI_AGENT_TOKEN which has write permissions for creating branches/PRs
          GITHUB_TOKEN: ${{ secrets.AI_AGENT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ENABLE_AI_AGENTS: ${{ vars.ENABLE_AI_AGENTS }}
          FORCE_REPROCESS: ${{ inputs.force_reprocess || 'false' }}
          # OpenRouter API key for alternative AI agents
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          # List of environment variables whose values should be masked in public comments
          MASK_ENV_VARS: "GITHUB_TOKEN,AI_AGENT_TOKEN,OPENROUTER_API_KEY"
          # Set Python path to include the current directory
          PYTHONPATH: ${{ github.workspace }}
          PYTHONUNBUFFERED: "1"
        run: |
          echo "Running issue monitor for repository: $GITHUB_REPOSITORY"
          echo "[INFO] Running directly on host machine to use Claude subscription authentication"

          # Check for Claude credentials
          if [ -f "$HOME/.claude.json" ]; then
            echo "[INFO] Found .claude.json file for Claude authentication"
          elif [ -d "$HOME/.claude" ]; then
            echo "[INFO] Found .claude directory for Claude authentication"
          else
            echo "[WARNING] No Claude credentials found at ~/.claude.json or ~/.claude/"
            echo "[WARNING] Claude CLI may not work without authentication"
          fi

          # Set up Node.js version using nvm
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load nvm
          if command -v nvm &> /dev/null; then
            echo "[INFO] Setting Node.js version with nvm..."
            nvm use 22.16.0 || {
              echo "[WARNING] Node.js 22.16.0 not found, trying to install..."
              nvm install 22.16.0
              nvm use 22.16.0
            }
            echo "[INFO] Node.js version: $(node --version)"
          else
            echo "[WARNING] nvm not found, Claude CLI may have issues"
          fi

          # Verify Claude CLI is available
          if command -v claude &> /dev/null; then
            echo "[INFO] Claude CLI found at: $(which claude)"
            echo "[INFO] Claude version: $(claude --version 2>&1 || echo 'version check failed')"
          else
            echo "[ERROR] Claude CLI not found. Please ensure it's installed on the host."
            exit 1
          fi

          # Run the issue monitor directly
          cd "${{ github.workspace }}"
          python3 scripts/agents/issue_monitor.py || {
              exit_code=$?
              echo "[ERROR] Issue monitor script failed with exit code: $exit_code"

              # Run debug script on failure
              echo "[DEBUG] Running import debug script..."
              python3 scripts/agents/debug_imports.py || true

              exit $exit_code
          }

      - name: Log monitoring results
        if: always()
        run: |
          echo "Issue monitoring completed at $(date)"
