---
name: MCP Tools Workflow

on:
  workflow_dispatch:
    inputs:
      tool_name:
        description: 'MCP tool to run'
        required: true
        type: choice
        options:
          - consult_gemini
          - create_manim_animation
          - compile_latex
          - format_check
          - lint
          - analyze
      tool_args:
        description: 'Tool arguments (JSON format)'
        required: false
        default: '{}'

jobs:
  run-mcp-tool:
    name: Execute MCP Tool
    runs-on: [self-hosted, linux]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Determine which MCP server to start
        id: determine_server
        run: |
          # Map tools to their respective servers
          case "${{ github.event.inputs.tool_name }}" in
            format_check|lint)
              echo "server=mcp-code-quality" >> $GITHUB_OUTPUT
              echo "port=8010" >> $GITHUB_OUTPUT
              ;;
            create_manim_animation|compile_latex)
              echo "server=mcp-content-creation" >> $GITHUB_OUTPUT
              echo "port=8011" >> $GITHUB_OUTPUT
              ;;
            consult_gemini)
              echo "server=gemini" >> $GITHUB_OUTPUT
              echo "port=8006" >> $GITHUB_OUTPUT
              echo "host_only=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "server=mcp-code-quality" >> $GITHUB_OUTPUT
              echo "port=8010" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Start appropriate MCP server
        if: steps.determine_server.outputs.host_only != 'true'
        uses: ./.github/actions/docker-compose-health-check
        with:
          services: '${{ steps.determine_server.outputs.server }}'
          health-endpoint: 'http://localhost:${{ steps.determine_server.outputs.port }}/health'
          timeout: '30'
          build: 'false'

      - name: Start Gemini server on host
        if: steps.determine_server.outputs.host_only == 'true'
        run: |
          python -m tools.mcp.gemini.server --mode http &
          echo $! > gemini.pid
          sleep 5

      - name: Execute MCP tool
        id: mcp_tool
        run: |
          python -c "
          import json
          import requests

          tool_name = '${{ github.event.inputs.tool_name }}'
          tool_args = json.loads('${{ github.event.inputs.tool_args }}')
          port = '${{ steps.determine_server.outputs.port }}'

          response = requests.post(
              f'http://localhost:{port}/mcp/execute',
              json={
                  'tool': tool_name,
                  'arguments': tool_args
              }
          )

          result = response.json()
          print(f'Tool output: {json.dumps(result, indent=2)}')

          # Save output for artifact
          with open('tool_output.json', 'w') as f:
              json.dump(result, f, indent=2)
          "

      - name: Upload tool output
        uses: actions/upload-artifact@v4
        with:
          name: mcp-tool-output
          path: tool_output.json

      - name: Post results to PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('tool_output.json', 'utf8'));

            const comment = `## MCP Tool Results

            **Tool**: ${{ github.event.inputs.tool_name }}

            **Output**:
            \`\`\`json
            ${JSON.stringify(output, null, 2)}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Stop MCP server
        if: always()
        run: |
          if [ -f gemini.pid ]; then
            kill $(cat gemini.pid) || true
            rm gemini.pid
          fi
          docker-compose down
          # Clean up output directories using Docker to handle permissions
          ./automation/ci-cd/cleanup-outputs.sh

  gemini-consultation:
    name: Gemini AI Consultation
    runs-on: [self-hosted, linux]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR changes
        id: pr_changes
        run: |
          git diff origin/${{ github.base_ref }}...HEAD > pr_changes.diff

      - name: Consult Gemini about changes
        run: |
          # Start Gemini MCP server on host
          python -m tools.mcp.gemini.server --mode http &
          GEMINI_PID=$!
          sleep 5

          # Use the MCP server to consult Gemini
          python -c "
          import json
          import requests

          with open('pr_changes.diff', 'r') as f:
              changes = f.read()

          prompt = f'''Review these code changes and provide feedback:

          {changes[:5000]}  # Truncate for API limits

          Focus on:
          1. Potential bugs or issues
          2. Performance concerns
          3. Best practices
          4. Security considerations
          '''

          response = requests.post(
              'http://localhost:8006/mcp/execute',
              json={
                  'tool': 'consult_gemini',
                  'arguments': {
                      'query': prompt,
                      'context': 'Pull request code review'
                  }
              }
          )

          result = response.json()
          review_text = result.get('result', {}).get('result', 'No review available')

          with open('gemini_review.md', 'w') as f:
              f.write(f'## Gemini AI Code Review\\n\\n{review_text}')
          "

          # Stop Gemini server
          kill $GEMINI_PID || true

      - name: Post Gemini review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
