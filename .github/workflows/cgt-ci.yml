---
name: CGT Validator CI
# CI pipeline for CGT validator on the cgt-validation branch

'on':
  push:
    branches: [cgt-validation]
    paths:
      - 'cgt-validator/**'
      - '.github/workflows/cgt-ci.yml'
  pull_request:
    branches: [cgt-validation]
    paths:
      - 'cgt-validator/**'
      - '.github/workflows/cgt-ci.yml'
  workflow_dispatch:
    inputs:
      run_full_test:
        description: 'Run full test suite including integration tests'
        required: false
        type: boolean
        default: false

concurrency:
  group: cgt-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Stage 1: Format and lint checks
  format-and-lint:
    name: Format and Lint Checks
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Run format check
        working-directory: ./cgt-validator
        run: |
          echo "🎨 Checking code formatting..."
          docker-compose -f docker-compose.yml run --rm cgt-lint sh -c "pip install black && python -m black --check src tests"

      - name: Run basic linting
        working-directory: ./cgt-validator
        run: |
          echo "🔍 Running basic linting..."
          docker-compose -f docker-compose.yml run --rm cgt-lint sh -c "pip install flake8 && python -m flake8 --config=.flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics"

      - name: Run full linting
        if: success()
        working-directory: ./cgt-validator
        run: |
          echo "🔍 Running full linting..."
          docker-compose -f docker-compose.yml run --rm cgt-lint sh -c "pip install black flake8 pylint && python -m black --check src tests && python -m flake8 --config=.flake8 src tests && python -m pylint src --disable=R,C"

  # Stage 2: Test suite
  test-suite:
    name: Test Suite
    needs: format-and-lint
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Set up test environment
        working-directory: ./cgt-validator
        run: |
          echo "🔧 Setting up test environment..."
          # Ensure required directories exist
          mkdir -p mock_data/oregon
          mkdir -p test-results

      - name: Debug docker-compose configuration
        working-directory: ./cgt-validator
        run: |
          echo "📋 Current docker-compose.yml configuration for cgt-test:"
          grep -A 20 "cgt-test:" docker-compose.yml || true

      - name: Rebuild test container
        working-directory: ./cgt-validator
        run: |
          echo "🏗️ Rebuilding test container to ensure latest configuration..."
          # Use only docker-compose.yml, not docker-compose.override.yml
          docker-compose -f docker-compose.yml build --no-cache cgt-test

      - name: Run unit tests
        working-directory: ./cgt-validator
        run: |
          echo "🧪 Running unit tests..."
          # Use only docker-compose.yml, not docker-compose.override.yml
          # Run tests and capture the container name
          CONTAINER_ID=$(docker-compose -f docker-compose.yml run -d cgt-test)

          # Wait for the container to finish
          docker wait $CONTAINER_ID

          # Copy htmlcov directory from container before it's removed
          docker cp $CONTAINER_ID:/app/htmlcov ./htmlcov || true

          # Remove the container
          docker rm $CONTAINER_ID

      - name: Tear down services
        if: always()
        working-directory: ./cgt-validator
        run: |
          echo "🧹 Cleaning up Docker services..."
          docker-compose down --remove-orphans

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cgt-coverage-${{ github.run_id }}
          path: |
            cgt-validator/test-results/coverage.xml
            cgt-validator/htmlcov/
          retention-days: 7

      - name: Generate test summary
        if: always()
        working-directory: ./cgt-validator
        run: |
          echo "## CGT Validator Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test-results/coverage.xml ]; then
            echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
            docker-compose run --rm cgt-dev python3 -c "
            import xml.etree.ElementTree as ET
            tree = ET.parse('test-results/coverage.xml')
            root = tree.getroot()
            line_rate = float(root.attrib.get('line-rate', 0)) * 100
            branch_rate = float(root.attrib.get('branch-rate', 0)) * 100

            print(f'- Line Coverage: {line_rate:.1f}%')
            print(f'- Branch Coverage: {branch_rate:.1f}%')
            " >> $GITHUB_STEP_SUMMARY
          fi

  # Stage 3: Validate mock data
  validate-mock-data:
    name: Validate Mock Data
    needs: format-and-lint
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rebuild Docker images to ensure latest code
        working-directory: ./cgt-validator
        run: |
          echo "🏗️ Rebuilding Docker images with latest code..."
          docker-compose build --no-cache cgt-dev

      - name: Generate and validate Oregon mock data
        working-directory: ./cgt-validator
        run: |
          echo "📊 Generating and validating Oregon mock data..."
          docker-compose run --rm cgt-dev bash -c "
            pip install -r requirements.txt && \
            python test_oregon_valid.py
          "

      - name: Validate all states mock data
        if: false # success()
        working-directory: ./cgt-validator
        run: |
          echo "📊 Validating mock data for all states..."
          docker-compose run --rm cgt-dev bash -c "
            pip install -r requirements.txt && \
            python scripts/validate-mock-data.py
          "

  # Stage 4: Security scan
  security-scan:
    name: Security Scan
    needs: format-and-lint
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        working-directory: ./cgt-validator
        run: |
          echo "🔒 Running security scan..."
          docker-compose run --rm cgt-dev bash -c "
            pip install bandit && \
            export PATH=/home/cgtuser/.local/bin:\$PATH && \
            bandit -r src/ -f json -o bandit-report.json || true
          "

      - name: Check dependencies for vulnerabilities
        working-directory: ./cgt-validator
        run: |
          echo "🔍 Checking dependencies..."
          docker-compose run --rm cgt-dev bash -c "
            pip install safety && \
            export PATH=/home/cgtuser/.local/bin:\$PATH && \
            safety check --json > safety-report.json || true
          "

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cgt-security-reports-${{ github.run_id }}
          path: |
            cgt-validator/bandit-report.json
            cgt-validator/safety-report.json
          retention-days: 7

  # Stage 5: Build and test Docker image
  docker-build:
    name: Docker Build and Test
    needs: [test-suite, validate-mock-data]
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build CGT Validator Docker image
        working-directory: ./cgt-validator
        run: |
          echo "🏗️ Building Docker image..."
          docker build -t cgt-validator:test .

      - name: Test Docker image
        run: |
          echo "🧪 Testing Docker image..."
          # Test that the CLI works in the container
          docker run --rm cgt-validator:test cgt-validate --help

      - name: Test Docker Compose setup
        working-directory: ./cgt-validator
        run: |
          echo "🧪 Testing Docker Compose..."
          docker-compose up -d
          sleep 5
          docker-compose ps
          docker-compose down

  # Stage 6: Integration tests (optional)
  integration-tests:
    name: Integration Tests
    needs: docker-build
    if: github.event.inputs.run_full_test == 'true' || github.ref == 'refs/heads/cgt-validation'
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run scraper integration test
        working-directory: ./cgt-validator
        run: |
          echo "🌐 Testing web scraper..."
          docker-compose run --rm cgt-dev bash -c "
            pip install -r requirements.txt && \
            python -c \"from src.scrapers.web_scraper import WebScraper; \
            scraper = WebScraper(); \
            result = scraper.fetch_url('https://www.example.com'); \
            print(f'Scraper test: {\\\"✅ Success\\\" if result else \\\"❌ Failed\\\"}')\"
          "

  # Final summary
  ci-summary:
    name: CI Summary
    needs: [format-and-lint, test-suite, validate-mock-data, security-scan, docker-build, integration-tests]
    if: always()
    runs-on: self-hosted
    steps:
      - name: Generate CI Summary
        run: |
          echo "# 📊 CGT Validator CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          FMT_RESULT="${{ needs.format-and-lint.result }}"
          FMT_STATUS="${{ needs.format-and-lint.result == 'success' && '✅' || needs.format-and-lint.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Format and Lint | ${FMT_STATUS} |" >> $GITHUB_STEP_SUMMARY
          TEST_RESULT="${{ needs.test-suite.result }}"
          TEST_STATUS="${{ needs.test-suite.result == 'success' && '✅' || needs.test-suite.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Test Suite | ${TEST_STATUS} |" >> $GITHUB_STEP_SUMMARY
          MOCK_RESULT="${{ needs.validate-mock-data.result }}"
          MOCK_STATUS="${{ needs.validate-mock-data.result == 'success' && '✅' || needs.validate-mock-data.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Mock Data Validation | ${MOCK_STATUS} |" >> $GITHUB_STEP_SUMMARY
          SEC_RESULT="${{ needs.security-scan.result }}"
          SEC_STATUS="${{ needs.security-scan.result == 'success' && '✅' || needs.security-scan.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Security Scan | ${SEC_STATUS} |" >> $GITHUB_STEP_SUMMARY
          DOCKER_RESULT="${{ needs.docker-build.result }}"
          DOCKER_STATUS="${{ needs.docker-build.result == 'success' && '✅' || needs.docker-build.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Docker Build | ${DOCKER_STATUS} |" >> $GITHUB_STEP_SUMMARY
          INT_RESULT="${{ needs.integration-tests.result }}"
          INT_STATUS="${{ needs.integration-tests.result == 'success' && '✅' || needs.integration-tests.result == 'skipped' && '⏭️' || '❌' }}"
          echo "| Integration Tests | ${INT_STATUS} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "## ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more stages failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ CI Pipeline Succeeded" >> $GITHUB_STEP_SUMMARY
            echo "All stages completed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
