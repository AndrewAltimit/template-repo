name: PR Review Monitor Agent

on:
  pull_request_review:
    types:
      - submitted
  pull_request_review_comment:
    types:
      - created
  schedule:
    # Also run periodically to catch any missed reviews
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      force_reprocess:
        description: 'Force reprocess PRs even if they have existing AI agent comments'
        required: false
        type: boolean
        default: false

permissions:
  pull-requests: write # Required to comment on PRs and push changes
  contents: read       # For actions/checkout. Agent uses AI_AGENT_TOKEN with write perms.

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  monitor-pr-reviews:
    name: Monitor PR Reviews
    runs-on: self-hosted
    environment: production
    # Only run if AI agents are enabled AND relevant event occurs
    # Note: User authorization is handled by the SecurityManager in the Python agent
    if: |
      vars.ENABLE_AI_AGENTS == 'true' && (
        github.event_name == 'schedule' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request_review' &&
         github.event.review.state == 'changes_requested') ||
        github.event_name == 'pull_request_review_comment'
      )

    steps:
      - name: Security Check - Log Event Details
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "pull_request_review" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            echo "PR Author: ${{ github.event.pull_request.user.login }}"
            echo "PR Number: ${{ github.event.pull_request.number }}"
            if [ "${{ github.event_name }}" = "pull_request_review" ]; then
              echo "Review Author: ${{ github.event.review.user.login }}"
            elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
              echo "Review Author: ${{ github.event.comment.user.login }}"
            fi
          fi


      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AI_AGENT_TOKEN }}

      - name: Configure Git
        run: |
          # Set git identity on the host. This works for the container because:
          # 1. The container runs as the same user (USER_ID:GROUP_ID)
          # 2. Git's global config is stored in the user's home directory
          # 3. The container mounts the host's file system, inheriting this config
          git config --global user.name "AI Review Agent"
          git config --global user.email "ai-review-agent@localhost"

      - name: Build AI agents container
        run: |
          docker-compose build ai-agents

      - name: Run PR review monitor in container
        env:
          # Use AI_AGENT_TOKEN which has write permissions for applying review suggestions
          GITHUB_TOKEN: ${{ secrets.AI_AGENT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ENABLE_AI_AGENTS: ${{ vars.ENABLE_AI_AGENTS }}
          # List of environment variables whose values should be masked in public comments
          # Note: GitHub Actions also automatically masks registered secrets in logs,
          # but we need explicit masking for PR comments which are public
          MASK_ENV_VARS: "GITHUB_TOKEN,AI_AGENT_TOKEN"
          # Enable verbose logging for better debugging
          PR_MONITOR_VERBOSE: "true"
          PYTHONUNBUFFERED: "1"
        run: |
          echo "=== PR Review Monitor Starting ==="
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Event: ${{ github.event_name }}"
          echo "AI Agents Enabled: $ENABLE_AI_AGENTS"
          echo "Verbose Logging: ENABLED"
          echo "================================="

          # If triggered by a specific PR event, we can optimize by checking just that PR
          if [ "${{ github.event_name }}" = "pull_request_review" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            echo "[INFO] Triggered by PR event on PR #${{ github.event.pull_request.number }}"
            if [ "${{ github.event_name }}" = "pull_request_review" ]; then
              echo "[INFO] Review state: ${{ github.event.review.state }}"
              echo "[INFO] Review author: ${{ github.event.review.user.login }}"
            fi
          else
            echo "[INFO] Triggered by: ${{ github.event_name }}"
          fi

          # Export dynamic user/group IDs to match project standards
          export USER_ID=$(id -u)
          export GROUP_ID=$(id -g)

          # Mount Claude config from host into container
          # The container runs as USER_ID:GROUP_ID
          # Create a writable home directory and copy configs
          # Run the container with explicit environment variables
          docker-compose run --rm -T --user "${USER_ID}:${GROUP_ID}" \
            -v "$HOME/.claude:/host-claude:ro" \
            -v "$HOME/.config/gh:/host-gh:ro" \
            -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
            -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}" \
            -e ENABLE_AI_AGENTS="${ENABLE_AI_AGENTS}" \
            -e MASK_ENV_VARS="${MASK_ENV_VARS}" \
            -e PR_MONITOR_VERBOSE="${PR_MONITOR_VERBOSE}" \
            -e PYTHONPATH=/workspace \
            ai-agents bash -c "
              set -x  # Enable bash debugging
              echo '[CONTAINER] Started bash script inside container'

              # Create writable home directory
              export HOME=/tmp/agent-home
              mkdir -p \$HOME/.config

              # Copy Claude credentials (read-only source)
              if [ -d /host-claude ]; then
                cp -r /host-claude \$HOME/.claude
              fi

              # Copy GitHub CLI config (read-only source)
              if [ -d /host-gh ]; then
                cp -r /host-gh \$HOME/.config/gh
              fi

              # Configure git identity globally in container
              git config --global user.name 'AI PR Agent'
              git config --global user.email 'ai-agent[bot]@users.noreply.github.com'

              # Run the agent with verbose output
              echo "[INFO] Starting PR review monitor agent..."
              echo "[INFO] Environment variables:"
              echo "  GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
              echo "  ENABLE_AI_AGENTS: $ENABLE_AI_AGENTS"
              echo "  PR_MONITOR_VERBOSE: $PR_MONITOR_VERBOSE"
              echo "  PYTHONPATH: $PYTHONPATH"
              echo "[INFO] Current directory: $(pwd)"
              echo "[INFO] Directory contents:"
              ls -la scripts/agents/

              # Check if required Python modules exist
              echo "[INFO] Checking Python modules..."
              if [ -f scripts/agents/pr_review_monitor.py ]; then
                echo "  ✓ pr_review_monitor.py exists"
              else
                echo "  ✗ pr_review_monitor.py not found!"
              fi

              # Test Python import
              echo "[INFO] Testing Python imports..."
              python -c "import sys; print('Python path:', sys.path)" || echo "Failed to print Python path"

              # Add the scripts/agents directory to PYTHONPATH
              export PYTHONPATH="/workspace/scripts/agents:$PYTHONPATH"
              echo "[INFO] Updated PYTHONPATH: $PYTHONPATH"

              # Run with explicit PR number if triggered by PR event
              if [ "${{ github.event_name }}" = "pull_request_review" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
                export TARGET_PR_NUMBER="${{ github.event.pull_request.number }}"
                echo "[INFO] Targeting specific PR: $TARGET_PR_NUMBER"
              fi

              echo "[INFO] Running PR review monitor..."

              # First, test if Python can run at all
              echo "[DEBUG] Testing basic Python execution..."
              python -c "print('[PYTHON] Basic Python test successful')" || echo "[ERROR] Basic Python test failed"

              # Try to run the script with full error output
              echo "[DEBUG] Attempting to run pr_review_monitor.py..."
              python -u scripts/agents/pr_review_monitor.py 2>&1 || {
                exit_code=$?
                echo "[ERROR] PR review monitor failed with exit code: $exit_code"
                # Try to get more info about the failure
                echo "[DEBUG] Attempting to import the script to check for syntax errors..."
                python -c "import scripts.agents.pr_review_monitor" 2>&1 || echo "[ERROR] Failed to import script"
                exit $exit_code
              }
              echo "[SUCCESS] PR review monitor completed successfully"
            "

      - name: Log monitoring results
        if: always()
        run: |
          echo "=== PR Review Monitor Summary ==="
          echo "Completion time: $(date)"
          echo "Workflow status: ${{ job.status }}"
          if [ "${{ job.status }}" = "failure" ]; then
            echo "[ERROR] Workflow failed - check logs above for details"
          else
            echo "[SUCCESS] Workflow completed successfully"
          fi
          echo "================================="
