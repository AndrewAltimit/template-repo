name: PR Review Monitor Agent

on:
  pull_request_review:
    types:
      - submitted
  pull_request_review_comment:
    types:
      - created
  schedule:
    # Also run periodically to catch any missed reviews
    - cron: '0 * * * *'
  workflow_dispatch: {}

permissions:
  pull-requests: write # Required to comment on PRs and push changes
  contents: read       # For actions/checkout. Agent uses AI_AGENT_TOKEN with write perms.

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  monitor-pr-reviews:
    name: Monitor PR Reviews
    runs-on: self-hosted
    environment: production
    # Only run if AI agents are enabled AND relevant event occurs
    # Note: User authorization is handled by the SecurityManager in the Python agent
    if: |
      vars.ENABLE_AI_AGENTS == 'true' && (
        github.event_name == 'schedule' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'pull_request_review' &&
         github.event.review.state == 'changes_requested') ||
        github.event_name == 'pull_request_review_comment'
      )

    steps:
      - name: Security Check - Log Event Details
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "pull_request_review" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            echo "PR Author: ${{ github.event.pull_request.user.login }}"
            echo "PR Number: ${{ github.event.pull_request.number }}"
            if [ "${{ github.event_name }}" = "pull_request_review" ]; then
              echo "Review Author: ${{ github.event.review.user.login }}"
            elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
              echo "Review Author: ${{ github.event.comment.user.login }}"
            fi
          fi


      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          # Set git identity on the host. This works for the container because:
          # 1. The container runs as the same user (USER_ID:GROUP_ID)
          # 2. Git's global config is stored in the user's home directory
          # 3. The container mounts the host's file system, inheriting this config
          git config --global user.name "AI Review Agent"
          git config --global user.email "ai-review-agent@localhost"

      - name: Build AI agents container
        run: |
          docker-compose build ai-agents

      - name: Run PR review monitor in container
        env:
          # Use AI_AGENT_TOKEN which has write permissions for applying review suggestions
          GITHUB_TOKEN: ${{ secrets.AI_AGENT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          ENABLE_AI_AGENTS: ${{ vars.ENABLE_AI_AGENTS }}
        run: |
          echo "Running PR review monitor for repository: $GITHUB_REPOSITORY"

          # If triggered by a specific PR event, we can optimize by checking just that PR
          if [ "${{ github.event_name }}" = "pull_request_review" ] || [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            echo "Triggered by PR event on PR #${{ github.event.pull_request.number }}"
          fi

          # Export dynamic user/group IDs to match project standards
          export USER_ID=$(id -u)
          export GROUP_ID=$(id -g)

          docker-compose run --rm --user "${USER_ID}:${GROUP_ID}" \
            -e GITHUB_TOKEN \
            -e GITHUB_REPOSITORY \
            -e ENABLE_AI_AGENTS \
            ai-agents python scripts/agents/pr_review_monitor.py

      - name: Log monitoring results
        if: always()
        run: |
          echo "PR review monitoring completed at $(date)"
