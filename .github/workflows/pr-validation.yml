name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for draft PRs)'
        required: false
        type: boolean
        default: false
      force_docker_validation:
        description: 'Force container validation'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

concurrency:
  group: pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quick validation and change detection
  detect-changes:
    name: Change Detection & Quick Validation
    runs-on: self-hosted
    timeout-minutes: 5
    outputs:
      python_changed: ${{ steps.changes.outputs.python_changed }}
      yaml_changed: ${{ steps.changes.outputs.yaml_changed }}
      docker_changed: ${{ steps.changes.outputs.docker_changed }}
      mcp_changed: ${{ steps.changes.outputs.mcp_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Detect file changes
        id: changes
        run: |
          echo "Analyzing changes..."
          
          # Handle different trigger types
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR trigger - comparing with base branch: ${{ github.base_ref }}"
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Push trigger - comparing with previous commit"
            git diff --name-only HEAD~1..HEAD > changed_files.txt
          else
            echo "Manual trigger - comparing with main branch"
            git diff --name-only origin/main...HEAD > changed_files.txt || git diff --name-only HEAD~5..HEAD > changed_files.txt
          fi
          
          # Count different types of changes
          python_count=$(grep -E '\.(py)$' changed_files.txt | wc -l || echo "0")
          yaml_count=$(grep -E '\.(ya?ml|json)$' changed_files.txt | wc -l || echo "0")
          docker_count=$(grep -E '(Dockerfile|docker-compose|\.dockerignore)' changed_files.txt | wc -l || echo "0")
          mcp_count=$(grep -E '(mcp|MCP|tools/)' changed_files.txt | wc -l || echo "0")
          docs_count=$(grep -E '\.(md|rst|txt)$' changed_files.txt | wc -l || echo "0")
          total_files=$(cat changed_files.txt | wc -l)
          
          # Set outputs
          echo "python_changed=$([[ $python_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "yaml_changed=$([[ $yaml_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT  
          echo "docker_changed=$([[ $docker_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "mcp_changed=$([[ $mcp_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docs_changed=$([[ $docs_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "files_changed=$total_files" >> $GITHUB_OUTPUT
          
          echo "[INFO] Change Summary:"
          echo "  Python files: $python_count"
          echo "  YAML/JSON files: $yaml_count" 
          echo "  Docker files: $docker_count"
          echo "  MCP files: $mcp_count"
          echo "  Documentation: $docs_count"
          echo "  Total files: $total_files"

  # Stage 2: Gemini AI Code Review
  gemini-review:
    name: Gemini AI Code Review
    needs: detect-changes
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    timeout-minutes: 5
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_BODY: ${{ github.event.pull_request.body }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      BASE_BRANCH: ${{ github.base_ref }}
      HEAD_BRANCH: ${{ github.head_ref }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Clean Python cache
        run: |
          # Clean Python cache to avoid permission issues
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true

      - name: Copy changed files list
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          fi

      # Skip Python setup on self-hosted runner - use system Python

      - name: Setup Node.js with nvm
        shell: bash
        run: |
          # Source nvm if available
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Use Node.js 22.16.0
          nvm use 22.16.0
          echo "Node.js version: $(node --version)"
          
          # Verify Gemini CLI is available
          which gemini || echo "Gemini CLI not found in PATH"

      - name: Run Gemini review
        continue-on-error: true  # Don't fail the PR if Gemini review fails
        shell: bash
        run: |
          # Source nvm and use correct Node version
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          
          # Run the Gemini review script
          python3 scripts/gemini-pr-review.py

      - name: Upload review artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-review-${{ github.run_id }}
          path: gemini-review.md
          retention-days: 7
          if-no-files-found: ignore

  # Stage 3: Python linting and formatting
  python-validation:
    name: Python Linting & Formatting
    needs: [detect-changes, gemini-review]
    if: |
      needs.detect-changes.outputs.python_changed == 'true' || 
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Run Python Linting with Docker
        run: |
          echo "üîç Running Python linting and formatting checks..."
          
          # Build the CI image if needed
          docker-compose build python-ci
          
          # Run Black formatting check
          echo "üìù Checking Python formatting with Black..."
          docker-compose run --rm python-ci black --check --diff .

      - name: Lint with Flake8
        run: |
          echo "üîç Running Flake8 linter..."
          docker-compose run --rm python-ci flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          docker-compose run --rm python-ci flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with MyPy
        continue-on-error: true
        run: |
          echo "üîç Running MyPy type checker..."
          docker-compose run --rm python-ci mypy . --ignore-missing-imports || true

      - name: Lint with Pylint
        continue-on-error: true
        run: |
          echo "üîç Running Pylint..."
          docker-compose run --rm python-ci bash -c "find . -name '*.py' -not -path './venv/*' | xargs pylint --exit-zero"

  # Stage 4: YAML/JSON validation
  config-validation:
    name: Config File Validation
    needs: [detect-changes, gemini-review]
    if: needs.detect-changes.outputs.yaml_changed == 'true'
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Validate YAML and JSON files with Docker
        run: |
          echo "üîç Validating configuration files..."
          
          # Build CI image if needed
          docker-compose build python-ci
          
          # Validate YAML files
          echo "üìã Validating YAML files..."
          docker-compose run --rm python-ci bash -c '
            for file in $(find . -name "*.yml" -o -name "*.yaml"); do
              echo "Checking $file..."
              yamllint "$file" || true
              python3 -c "import yaml; yaml.safe_load(open(\"$file\")); print(\"‚úÖ Valid YAML: $file\")" || echo "‚ùå Invalid YAML: $file"
            done
          '
          
          # Validate JSON files
          echo "üìã Validating JSON files..."
          docker-compose run --rm python-ci bash -c '
            for file in $(find . -name "*.json"); do
              echo "Checking $file..."
              python3 -m json.tool "$file" > /dev/null && echo "‚úÖ Valid JSON: $file" || echo "‚ùå Invalid JSON: $file"
            done
          '

  # Stage 5: Test execution
  test-suite:
    name: Test Suite
    needs: [detect-changes, gemini-review, python-validation]
    if: |
      (needs.detect-changes.outputs.python_changed == 'true' || 
       needs.detect-changes.outputs.mcp_changed == 'true') &&
      !github.event.inputs.skip_tests
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Run tests with Docker
        run: |
          echo "üß™ Running test suite with Docker..."
          
          # Build the CI image if needed
          docker-compose build python-ci
          
          # Run tests with coverage
          docker-compose run --rm python-ci bash -c "pip install -r requirements.txt && pytest tests/ -v --cov=. --cov-report=xml --cov-report=term"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Stage 6: MCP Server validation
  mcp-validation:
    name: MCP Server Validation
    needs: [detect-changes, gemini-review]
    if: |
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      # No need to install Python or dependencies - Docker handles it

      - name: Start MCP server with Docker Compose
        run: |
          echo "üöÄ Starting MCP server with Docker Compose..."
          docker-compose up -d mcp-server
          
          # Wait for server to be ready
          echo "‚è≥ Waiting for server to be healthy..."
          timeout 60 bash -c 'until curl -s http://localhost:8005/health > /dev/null 2>&1; do echo -n "."; sleep 1; done'
          echo ""
          echo "‚úÖ MCP server is ready!"

      - name: Test MCP server functionality
        run: |
          echo "ü§ñ Testing MCP server integration..."
          # Build python-ci if needed
          docker-compose build python-ci
          # Install requirements and run test
          docker-compose run --rm python-ci bash -c "pip install -r requirements.txt && python scripts/test-mcp-server.py http://mcp-server:8000"
          
      - name: View MCP server logs
        if: failure()
        run: |
          echo "üìã MCP server logs:"
          docker-compose logs mcp-server
          
      - name: Stop MCP server
        if: always()
        run: |
          docker-compose down

  # Stage 7: Docker image validation
  docker-validation:
    name: Docker Image Validation
    needs: [detect-changes, gemini-review]
    if: |
      needs.detect-changes.outputs.docker_changed == 'true' ||
      github.event.inputs.force_docker_validation
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Pre-checkout cleanup
        run: |
          # Clean workspace before checkout to avoid permission issues
          if [ -d "${{ github.workspace }}" ]; then
            echo "Cleaning workspace: ${{ github.workspace }}"
            # Use docker with root to clean everything
            docker run --rm -v "${{ github.workspace }}:/workspace" ubuntu:latest bash -c "
              find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
              find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
              chmod -R 777 /workspace 2>/dev/null || true
            " || echo "Docker cleanup completed with warnings"
            # Also try local cleanup
            find "${{ github.workspace }}" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "${{ github.workspace }}" -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker builds
        run: |
          echo "üê≥ Validating Docker image builds..."
          
          # Test main MCP Dockerfile
          if [ -f "docker/mcp.Dockerfile" ]; then
            echo "Building MCP image..."
            docker build -f docker/mcp.Dockerfile -t mcp-test:${{ github.run_id }} .
          fi
          
          # Test MCP HTTP bridge Dockerfile
          if [ -f "docker/mcp-http-bridge.Dockerfile" ]; then
            echo "Building MCP HTTP bridge image..."
            docker build -f docker/mcp-http-bridge.Dockerfile -t mcp-http-bridge-test:${{ github.run_id }} .
          fi
          
          echo "‚úÖ Docker image validation passed"

      - name: Test Docker Compose
        run: |
          echo "üê≥ Validating docker-compose configuration..."
          docker-compose config
          
          echo "üê≥ Testing service startup..."
          docker-compose up -d
          sleep 10
          docker-compose ps
          docker-compose logs
          docker-compose down
          
          echo "‚úÖ Docker Compose validation passed"

  # Final status and summary
  pr-status:
    name: PR Status Summary
    needs: [detect-changes, gemini-review, python-validation, config-validation, test-suite, mcp-validation, docker-validation]
    if: always()
    runs-on: self-hosted
    steps:
      - name: Generate status summary
        run: |
          echo "## PR Validation Summary"
          echo ""
          echo "**Files changed:** ${{ needs.detect-changes.outputs.files_changed }}"
          echo "**Python files:** ${{ needs.detect-changes.outputs.python_changed }}"
          echo "**Config files:** ${{ needs.detect-changes.outputs.yaml_changed }}"
          echo "**Docker files:** ${{ needs.detect-changes.outputs.docker_changed }}"
          echo "**MCP files:** ${{ needs.detect-changes.outputs.mcp_changed }}"
          echo ""
          echo "**Validation Results:**"
          echo "- Change Detection: ${{ needs.detect-changes.result }}"
          echo "- Gemini AI Review: ${{ needs.gemini-review.result }}"
          echo "- Python Validation: ${{ needs.python-validation.result }}"
          echo "- Config Validation: ${{ needs.config-validation.result }}"
          echo "- Test Suite: ${{ needs.test-suite.result }}"
          echo "- MCP Validation: ${{ needs.mcp-validation.result }}"
          echo "- Docker Validation: ${{ needs.docker-validation.result }}"
          
          # Check for failures
          if [[ "${{ needs.detect-changes.result }}" == "failure" || 
                "${{ needs.python-validation.result }}" == "failure" ||
                "${{ needs.config-validation.result }}" == "failure" ||
                "${{ needs.test-suite.result }}" == "failure" ||
                "${{ needs.mcp-validation.result }}" == "failure" ||
                "${{ needs.docker-validation.result }}" == "failure" ]]; then
            echo ""
            echo "‚ùå PR validation failed - please review the failed checks"
            exit 1
          fi
          
          echo ""
          echo "‚úÖ PR validation completed successfully!"

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const results = {
              'change-detection': '${{ needs.detect-changes.result }}',
              'gemini-review': '${{ needs.gemini-review.result }}',
              'python-validation': '${{ needs.python-validation.result }}',
              'config-validation': '${{ needs.config-validation.result }}',
              'test-suite': '${{ needs.test-suite.result }}',
              'mcp-validation': '${{ needs.mcp-validation.result }}',
              'docker-validation': '${{ needs.docker-validation.result }}'
            };
            
            const filesChanged = '${{ needs.detect-changes.outputs.files_changed }}';
            const isDraft = context.payload.pull_request.draft;
            
            let comment = '## üîç PR Validation Results\n\n';
            comment += `**Files changed:** ${filesChanged}\n\n`;
            comment += '| Check | Status |\n|-------|--------|\n';
            
            Object.entries(results).forEach(([check, status]) => {
              let icon = status === 'success' ? '‚úÖ' : 
                        status === 'failure' ? '‚ùå' : 
                        status === 'skipped' ? '‚è≠Ô∏è' : 'üîÑ';
              
              let displayName = check.charAt(0).toUpperCase() + check.slice(1).replace('-', ' ');
              comment += `| ${displayName} | ${icon} |\n`;
            });
            
            if (isDraft) {
              comment += '\n> üí° **Draft PR** - Some validations may be skipped.\n';
            }
            
            comment += '\nü§ñ *Generated by automated PR validation*';
            
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post comment:', error.message);
            }