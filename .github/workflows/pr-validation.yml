---
name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, converted_to_draft]
    branches: [main, develop]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

concurrency:
  group: pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quick validation and change detection
  detect-changes:
    name: Change Detection & Quick Validation
    runs-on: self-hosted
    timeout-minutes: 5
    outputs:
      python_changed: ${{ steps.changes.outputs.python_changed }}
      yaml_changed: ${{ steps.changes.outputs.yaml_changed }}
      docker_changed: ${{ steps.changes.outputs.docker_changed }}
      mcp_changed: ${{ steps.changes.outputs.mcp_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Detect file changes
        id: changes
        run: |
          echo "Analyzing changes..."

          # Handle different trigger types
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR trigger - comparing with base branch: ${{ github.base_ref }}"
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Push trigger - comparing with previous commit"
            git diff --name-only HEAD~1..HEAD > changed_files.txt
          else
            echo "Manual trigger - comparing with main branch"
            git diff --name-only origin/main...HEAD > changed_files.txt || git diff --name-only HEAD~5..HEAD > changed_files.txt
          fi

          # Count different types of changes
          python_count=$(grep -E '\.(py)$' changed_files.txt | wc -l || echo "0")
          yaml_count=$(grep -E '\.(ya?ml|json)$' changed_files.txt | wc -l || echo "0")
          docker_count=$(grep -E '(Dockerfile|docker-compose\.yml|docker-compose\.yaml|\.dockerignore)' changed_files.txt | wc -l || echo "0")
          mcp_count=$(grep -E '(mcp|MCP|tools/)' changed_files.txt | wc -l || echo "0")
          docs_count=$(grep -E '\.(md|rst|txt)$' changed_files.txt | wc -l || echo "0")
          total_files=$(cat changed_files.txt | wc -l)

          # Set outputs
          echo "python_changed=$([[ $python_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "yaml_changed=$([[ $yaml_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docker_changed=$([[ $docker_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "mcp_changed=$([[ $mcp_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docs_changed=$([[ $docs_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "files_changed=$total_files" >> $GITHUB_OUTPUT

          echo "[INFO] Change Summary:"
          echo "  Python files: $python_count"
          echo "  YAML/JSON files: $yaml_count"
          echo "  Docker files: $docker_count"
          echo "  MCP files: $mcp_count"
          echo "  Documentation: $docs_count"
          echo "  Total files: $total_files"

  # Stage 2: Gemini AI Code Review
  gemini-review:
    name: Gemini AI Code Review
    needs: detect-changes
    if: github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'help wanted') || !github.event.pull_request.draft)
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_BODY: ${{ github.event.pull_request.body }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      BASE_BRANCH: ${{ github.base_ref }}
      HEAD_BRANCH: ${{ github.head_ref }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Copy changed files list
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          fi

      - name: Setup Node.js with nvm
        shell: bash
        run: |
          # Source nvm if available
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # Use Node.js 22.16.0
          nvm use 22.16.0
          echo "Node.js version: $(node --version)"

          # Verify Gemini CLI is available
          which gemini || echo "Gemini CLI not found in PATH"

      - name: Prepare Gemini review context
        run: |
          echo "📋 Preparing review context..."
          # Ensure PROJECT_CONTEXT.md is available
          if [ ! -f "PROJECT_CONTEXT.md" ]; then
            echo "Warning: PROJECT_CONTEXT.md not found - Gemini will use fallback context"
          else
            echo "Found PROJECT_CONTEXT.md - Gemini will have full project context"
          fi

      - name: Clear Gemini conversation history
        continue-on-error: true
        run: |
          echo "🧹 Clearing Gemini conversation history..."
          # Gemini MCP server must run on host (not in container)
          # Start Gemini MCP server in background
          python -m tools.mcp.gemini.server --mode http &
          GEMINI_PID=$!

          # Wait for server to be ready with health check polling
          echo "⏳ Waiting for Gemini server to be ready..."
          for i in {1..30}; do
            if curl -f -s http://localhost:8006/health > /dev/null 2>&1; then
              echo "✅ Gemini server is ready"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Gemini server failed to start after 30 seconds"
              kill $GEMINI_PID || true
              exit 1
            fi
            echo "  Attempt $i/30..."
            sleep 1
          done

          # Call the clear history endpoint via Gemini MCP server
          curl -X POST http://localhost:8006/mcp/execute \
            -H "Content-Type: application/json" \
            -d '{"tool": "clear_gemini_history", "arguments": {}}' \
            || echo "Warning: Could not clear Gemini history"

          # Stop the Gemini server
          kill $GEMINI_PID || true

      - name: Run Gemini review
        continue-on-error: true  # Don't fail the PR if Gemini review fails
        shell: bash
        run: |
          # Source nvm and use correct Node version
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 22.16.0

          # Run the Gemini review script
          python3 scripts/gemini-pr-review.py

      - name: Upload review artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-review-${{ github.run_id }}
          path: gemini-review.md
          retention-days: 7
          if-no-files-found: ignore

  # Final status and summary
  pr-status:
    name: PR Status Summary
    needs:
      - detect-changes
      - gemini-review
    if: always()
    runs-on: self-hosted
    steps:
      - name: Generate status summary
        run: |
          echo "## PR Validation Summary"
          echo ""
          echo "**Files changed:** ${{ needs.detect-changes.outputs.files_changed }}"
          echo "**Python files:** ${{ needs.detect-changes.outputs.python_changed }}"
          echo "**Config files:** ${{ needs.detect-changes.outputs.yaml_changed }}"
          echo "**Docker files:** ${{ needs.detect-changes.outputs.docker_changed }}"
          echo "**MCP files:** ${{ needs.detect-changes.outputs.mcp_changed }}"
          echo ""
          echo "**Validation Results:**"
          echo "- Change Detection: ${{ needs.detect-changes.result }}"
          echo "- Gemini AI Review: ${{ needs.gemini-review.result }}"

          # Check for failures
          if [[ "${{ needs.detect-changes.result }}" == "failure" ]]; then
            echo ""
            echo "❌ PR validation failed - please review the failed checks"
            exit 1
          fi

          echo ""
          echo "✅ PR validation completed successfully!"

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const results = {
              'change-detection': '${{ needs.detect-changes.result }}',
              'gemini-review': '${{ needs.gemini-review.result }}'
            };

            const filesChanged = '${{ needs.detect-changes.outputs.files_changed }}';
            const isDraft = context.payload.pull_request.draft;

            let comment = '## 🔍 PR Validation Results\n\n';
            comment += `**Files changed:** ${filesChanged}\n\n`;
            comment += '| Check | Status |\n|-------|--------|\n';

            Object.entries(results).forEach(([check, status]) => {
              let icon = status === 'success' ? '✅' :
                        status === 'failure' ? '❌' :
                        status === 'skipped' ? '⏭️' : '🔄';

              let displayName = check.charAt(0).toUpperCase() + check.slice(1).replace('-', ' ');
              comment += `| ${displayName} | ${icon} |\n`;
            });

            if (isDraft) {
              comment += '\n> 💡 **Draft PR** - Some validations may be skipped.\n';
            }

            comment += '\n🤖 *Generated by automated PR validation*';

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post comment:', error.message);
            }
