---
name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for draft PRs)'
        required: false
        type: boolean
        default: false
      force_docker_validation:
        description: 'Force container validation'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: read

concurrency:
  group: pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Stage 1: Quick validation and change detection
  detect-changes:
    name: Change Detection & Quick Validation
    runs-on: self-hosted
    timeout-minutes: 5
    outputs:
      python_changed: ${{ steps.changes.outputs.python_changed }}
      yaml_changed: ${{ steps.changes.outputs.yaml_changed }}
      docker_changed: ${{ steps.changes.outputs.docker_changed }}
      mcp_changed: ${{ steps.changes.outputs.mcp_changed }}
      docs_changed: ${{ steps.changes.outputs.docs_changed }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Detect file changes
        id: changes
        run: |
          echo "Analyzing changes..."

          # Handle different trigger types
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR trigger - comparing with base branch: ${{ github.base_ref }}"
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Push trigger - comparing with previous commit"
            git diff --name-only HEAD~1..HEAD > changed_files.txt
          else
            echo "Manual trigger - comparing with main branch"
            git diff --name-only origin/main...HEAD > changed_files.txt || git diff --name-only HEAD~5..HEAD > changed_files.txt
          fi

          # Count different types of changes
          python_count=$(grep -E '\.(py)$' changed_files.txt | wc -l || echo "0")
          yaml_count=$(grep -E '\.(ya?ml|json)$' changed_files.txt | wc -l || echo "0")
          docker_count=$(grep -E '(Dockerfile|docker-compose\.yml|docker-compose\.yaml|\.dockerignore)' changed_files.txt | wc -l || echo "0")
          mcp_count=$(grep -E '(mcp|MCP|tools/)' changed_files.txt | wc -l || echo "0")
          docs_count=$(grep -E '\.(md|rst|txt)$' changed_files.txt | wc -l || echo "0")
          total_files=$(cat changed_files.txt | wc -l)

          # Set outputs
          echo "python_changed=$([[ $python_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "yaml_changed=$([[ $yaml_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docker_changed=$([[ $docker_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "mcp_changed=$([[ $mcp_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "docs_changed=$([[ $docs_count -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "files_changed=$total_files" >> $GITHUB_OUTPUT

          echo "[INFO] Change Summary:"
          echo "  Python files: $python_count"
          echo "  YAML/JSON files: $yaml_count"
          echo "  Docker files: $docker_count"
          echo "  MCP files: $mcp_count"
          echo "  Documentation: $docs_count"
          echo "  Total files: $total_files"

  # Stage 2: Gemini AI Code Review
  gemini-review:
    name: Gemini AI Code Review
    needs: detect-changes
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_BODY: ${{ github.event.pull_request.body }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      BASE_BRANCH: ${{ github.base_ref }}
      HEAD_BRANCH: ${{ github.head_ref }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # No pre-checkout cleanup needed - actions/checkout with clean: true handles this

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      # Python cache cleanup not needed with proper user permissions

      - name: Copy changed files list
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          fi

      # Skip Python setup on self-hosted runner - use system Python

      - name: Setup Node.js with nvm
        shell: bash
        run: |
          # Source nvm if available
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          # Use Node.js 22.16.0
          nvm use 22.16.0
          echo "Node.js version: $(node --version)"

          # Verify Gemini CLI is available
          which gemini || echo "Gemini CLI not found in PATH"

      - name: Prepare Gemini review context
        run: |
          echo "üìã Preparing review context..."
          # Ensure PROJECT_CONTEXT.md is available
          if [ ! -f "PROJECT_CONTEXT.md" ]; then
            echo "Warning: PROJECT_CONTEXT.md not found - Gemini will use fallback context"
          else
            echo "Found PROJECT_CONTEXT.md - Gemini will have full project context"
          fi

      - name: Start MCP server for Gemini history clear
        continue-on-error: true
        uses: ./.github/actions/docker-compose-health-check
        with:
          services: 'mcp-server'
          health-endpoint: 'http://localhost:8005/health'
          timeout: '30'
          build: 'true'

      - name: Clear Gemini conversation history
        continue-on-error: true
        run: |
          echo "üßπ Clearing Gemini conversation history..."
          # Call the clear history endpoint via MCP server
          curl -X POST http://localhost:8005/tools/execute \
            -H "Content-Type: application/json" \
            -d '{"tool": "clear_gemini_history", "arguments": {}}' \
            || echo "Warning: Could not clear Gemini history"

          # Stop the server after clearing history
          docker-compose down

      - name: Run Gemini review
        continue-on-error: true  # Don't fail the PR if Gemini review fails
        shell: bash
        run: |
          # Source nvm and use correct Node version
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 22.16.0

          # Run the Gemini review script
          python3 scripts/gemini-pr-review.py

      - name: Upload review artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-review-${{ github.run_id }}
          path: gemini-review.md
          retention-days: 7
          if-no-files-found: ignore

  # Stage 3a: Format check stage
  format-check:
    name: Python Format Check
    needs: [detect-changes, gemini-review]
    if: |
      needs.detect-changes.outputs.python_changed == 'true' ||
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    uses: ./.github/workflows/lint-stages.yml
    with:
      stage: format
      upload_artifacts: true
    secrets: inherit

  # Stage 3b: Basic lint stage
  basic-lint:
    name: Python Basic Lint
    needs: [detect-changes, gemini-review, format-check]
    if: |
      needs.detect-changes.outputs.python_changed == 'true' ||
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    uses: ./.github/workflows/lint-stages.yml
    with:
      stage: basic
      upload_artifacts: true
    secrets: inherit

  # Stage 3c: Full lint stage (includes security & type checking)
  full-lint:
    name: Python Full Lint
    needs: [detect-changes, gemini-review, format-check, basic-lint]
    if: |
      needs.detect-changes.outputs.python_changed == 'true' ||
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    uses: ./.github/workflows/lint-stages.yml
    with:
      stage: full
      upload_artifacts: true
    secrets: inherit

  # Stage 4: YAML/JSON validation
  config-validation:
    name: Config File Validation
    needs: [detect-changes, gemini-review]
    if: needs.detect-changes.outputs.yaml_changed == 'true'
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      # No pre-checkout cleanup needed - actions/checkout with clean: true handles this

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Validate YAML and JSON files
        run: |
          echo "üîç Validating configuration files..."
          ./scripts/run-ci.sh yaml-lint
          ./scripts/run-ci.sh json-lint

  # Stage 4b: Workflow file validation (always run)
  workflow-validation:
    name: Workflow File Validation
    needs: [detect-changes, gemini-review]
    if: always() && !cancelled()
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Validate workflow files
        run: |
          echo "üîç Validating GitHub Actions workflow files..."

          # Build the CI image if needed
          docker-compose build python-ci

          # Validate all workflow files
          docker-compose run --rm python-ci bash -c '
            echo "Checking workflow files in .github/workflows/..."
            workflow_errors=0

            for file in .github/workflows/*.yml .github/workflows/*.yaml; do
              if [ -f "$file" ]; then
                echo "Validating: $file"

                # Run yamllint with specific config for workflows
                if yamllint -d "{extends: default, rules: {line-length: {max: 200}, document-start: disable}}" "$file"; then
                  :
                else
                  echo "‚ùå YAML lint failed for $file"
                  workflow_errors=$((workflow_errors + 1))
                fi

                # Validate YAML can be parsed
                if python3 -c "import yaml; yaml.safe_load(open(\"$file\")); print(\"‚úÖ Valid YAML structure: $file\")"; then
                  :
                else
                  echo "‚ùå YAML parse failed for $file"
                  workflow_errors=$((workflow_errors + 1))
                fi
              fi
            done

            if [ $workflow_errors -gt 0 ]; then
              echo "‚ùå Found $workflow_errors workflow file error(s)"
              exit 1
            else
              echo "‚úÖ All workflow files are valid!"
            fi
          '

  # Stage 4c: Comprehensive YAML linting (always run)
  yaml-lint:
    name: YAML Lint All Files
    needs: [detect-changes, gemini-review]
    if: always() && !cancelled()
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Run YAML lint on all files
        run: |
          echo "üîç Running comprehensive YAML linting..."
          ./scripts/run-ci.sh yaml-lint

  # Stage 5: Test execution
  test-suite:
    name: Test Suite
    needs: [detect-changes, gemini-review, format-check, basic-lint, full-lint]
    if: |
      (needs.detect-changes.outputs.python_changed == 'true' ||
       needs.detect-changes.outputs.mcp_changed == 'true') &&
      !github.event.inputs.skip_tests
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      # No pre-checkout cleanup needed - actions/checkout with clean: true handles this

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          ./scripts/run-ci.sh test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Stage 6: MCP Server validation
  mcp-validation:
    name: MCP Server Validation
    needs: [detect-changes, gemini-review]
    if: |
      needs.detect-changes.outputs.mcp_changed == 'true' ||
      !github.event.pull_request.draft
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # No pre-checkout cleanup needed - actions/checkout with clean: true handles this

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      # No need to install Python or dependencies - Docker handles it

      - name: Start MCP server with health check
        uses: ./.github/actions/docker-compose-health-check
        with:
          services: 'mcp-server'
          health-endpoint: 'http://localhost:8005/health'
          timeout: '60'
          build: 'true'

      - name: Test MCP server functionality
        run: |
          echo "ü§ñ Testing MCP server integration..."
          # Build python-ci if needed
          docker-compose build python-ci
          # Install requirements and run test
          docker-compose run --rm python-ci bash -c "pip install -r requirements.txt && python scripts/test-mcp-server.py http://mcp-server:8000"

      - name: View MCP server logs
        if: failure()
        run: |
          echo "üìã MCP server logs:"
          docker-compose logs mcp-server

      - name: Stop MCP server
        if: always()
        run: |
          docker-compose down

  # Stage 7: Docker image validation
  docker-validation:
    name: Docker Image Validation
    needs: [detect-changes, gemini-review, format-check, basic-lint, full-lint]
    if: |
      needs.detect-changes.outputs.docker_changed == 'true' ||
      needs.detect-changes.outputs.python_changed == 'true' ||
      github.event.inputs.force_docker_validation ||
      !github.event.pull_request.draft
    runs-on: self-hosted
    timeout-minutes: 20
    steps:
      # No pre-checkout cleanup needed - actions/checkout with clean: true handles this

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-

      # Note: Docker builds intentionally do not use GitHub Actions cache (cache-from/cache-to)
      # to avoid cache service availability issues. The self-hosted runner's local Docker
      # cache provides sufficient caching for our needs.
      - name: Build MCP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/mcp.Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-mcp
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-mcp-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build MCP HTTP Bridge image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/mcp-http-bridge.Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-mcp-http-bridge
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-mcp-http-bridge-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build Python CI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/python-ci.Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-python-ci
            ${{ env.REGISTRY }}/andrewaltimit/template-repo:pr-${{ github.event.pull_request.number }}-python-ci-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Test Docker Compose with health check
        uses: ./.github/actions/docker-compose-health-check
        with:
          services: ''  # all services
          health-endpoint: 'http://localhost:8005/health'
          timeout: '60'
          build: 'true'

      - name: Stop services
        if: always()
        run: docker-compose down

  # Final status and summary
  pr-status:
    name: PR Status Summary
    needs: [detect-changes, gemini-review, format-check, basic-lint, full-lint, config-validation, workflow-validation, yaml-lint, test-suite, mcp-validation, docker-validation]
    if: always()
    runs-on: self-hosted
    steps:
      - name: Generate status summary
        run: |
          echo "## PR Validation Summary"
          echo ""
          echo "**Files changed:** ${{ needs.detect-changes.outputs.files_changed }}"
          echo "**Python files:** ${{ needs.detect-changes.outputs.python_changed }}"
          echo "**Config files:** ${{ needs.detect-changes.outputs.yaml_changed }}"
          echo "**Docker files:** ${{ needs.detect-changes.outputs.docker_changed }}"
          echo "**MCP files:** ${{ needs.detect-changes.outputs.mcp_changed }}"
          echo ""
          echo "**Validation Results:**"
          echo "- Change Detection: ${{ needs.detect-changes.result }}"
          echo "- Gemini AI Review: ${{ needs.gemini-review.result }}"
          echo "- Format Check: ${{ needs.format-check.result }}"
          echo "- Basic Lint: ${{ needs.basic-lint.result }}"
          echo "- Full Lint: ${{ needs.full-lint.result }}"
          echo "- Config Validation: ${{ needs.config-validation.result }}"
          echo "- Workflow Validation: ${{ needs.workflow-validation.result }}"
          echo "- YAML Lint: ${{ needs.yaml-lint.result }}"
          echo "- Test Suite: ${{ needs.test-suite.result }}"
          echo "- MCP Validation: ${{ needs.mcp-validation.result }}"
          echo "- Docker Validation: ${{ needs.docker-validation.result }}"

          # Check for failures
          if [[ "${{ needs.detect-changes.result }}" == "failure" ||
                "${{ needs.format-check.result }}" == "failure" ||
                "${{ needs.basic-lint.result }}" == "failure" ||
                "${{ needs.full-lint.result }}" == "failure" ||
                "${{ needs.config-validation.result }}" == "failure" ||
                "${{ needs.workflow-validation.result }}" == "failure" ||
                "${{ needs.yaml-lint.result }}" == "failure" ||
                "${{ needs.test-suite.result }}" == "failure" ||
                "${{ needs.mcp-validation.result }}" == "failure" ||
                "${{ needs.docker-validation.result }}" == "failure" ]]; then
            echo ""
            echo "‚ùå PR validation failed - please review the failed checks"
            exit 1
          fi

          echo ""
          echo "‚úÖ PR validation completed successfully!"

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const results = {
              'change-detection': '${{ needs.detect-changes.result }}',
              'gemini-review': '${{ needs.gemini-review.result }}',
              'format-check': '${{ needs.format-check.result }}',
              'basic-lint': '${{ needs.basic-lint.result }}',
              'full-lint': '${{ needs.full-lint.result }}',
              'config-validation': '${{ needs.config-validation.result }}',
              'workflow-validation': '${{ needs.workflow-validation.result }}',
              'yaml-lint': '${{ needs.yaml-lint.result }}',
              'test-suite': '${{ needs.test-suite.result }}',
              'mcp-validation': '${{ needs.mcp-validation.result }}',
              'docker-validation': '${{ needs.docker-validation.result }}'
            };

            const filesChanged = '${{ needs.detect-changes.outputs.files_changed }}';
            const isDraft = context.payload.pull_request.draft;

            let comment = '## üîç PR Validation Results\n\n';
            comment += `**Files changed:** ${filesChanged}\n\n`;
            comment += '| Check | Status |\n|-------|--------|\n';

            Object.entries(results).forEach(([check, status]) => {
              let icon = status === 'success' ? '‚úÖ' :
                        status === 'failure' ? '‚ùå' :
                        status === 'skipped' ? '‚è≠Ô∏è' : 'üîÑ';

              let displayName = check.charAt(0).toUpperCase() + check.slice(1).replace('-', ' ');
              comment += `| ${displayName} | ${icon} |\n`;
            });

            if (isDraft) {
              comment += '\n> üí° **Draft PR** - Some validations may be skipped.\n';
            }

            comment += '\nü§ñ *Generated by automated PR validation*';

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post comment:', error.message);
            }
