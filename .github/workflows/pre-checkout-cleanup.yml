name: Pre-Checkout Cleanup
# Reusable workflow for cleaning workspace before checkout to avoid permission issues

on:
  workflow_call:
    inputs:
      workspace_path:
        description: 'Path to the workspace to clean'
        required: false
        type: string
        default: '${{ github.workspace }}'

jobs:
  cleanup:
    name: Clean Workspace
    runs-on: self-hosted
    steps:
      - name: Pre-checkout permission fix
        run: |
          echo "üßπ Cleaning workspace to prevent permission issues..."
          WORKSPACE_PATH="${{ inputs.workspace_path }}"
          
          # Check if workspace exists
          if [ -d "$WORKSPACE_PATH" ]; then
            echo "Found workspace at: $WORKSPACE_PATH"
            
            # Method 1: Try to clean using current user permissions
            echo "Attempting cleanup with current user permissions..."
            find "$WORKSPACE_PATH" -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find "$WORKSPACE_PATH" -type f -name "*.pyc" -delete 2>/dev/null || true
            find "$WORKSPACE_PATH" -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
            find "$WORKSPACE_PATH" -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
            
            # Method 2: Use Docker with root permissions if needed
            # This handles files created by containers with different UIDs
            if find "$WORKSPACE_PATH" -type d -name "__pycache__" -print -quit 2>/dev/null | grep -q .; then
              echo "Found stubborn __pycache__ directories, using Docker for cleanup..."
              docker run --rm \
                -v "$WORKSPACE_PATH:/workspace" \
                --user root \
                alpine:latest \
                sh -c "
                  echo 'Removing Python cache files with root permissions...'
                  find /workspace -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
                  find /workspace -type f -name '*.pyc' -exec rm -f {} + 2>/dev/null || true
                  find /workspace -type d -name '.pytest_cache' -exec rm -rf {} + 2>/dev/null || true
                  find /workspace -type d -name '.mypy_cache' -exec rm -rf {} + 2>/dev/null || true
                  # Fix permissions on remaining files
                  chmod -R 777 /workspace 2>/dev/null || true
                " || echo "Docker cleanup completed (some warnings are normal)"
            fi
            
            echo "‚úÖ Workspace cleanup completed"
          else
            echo "‚ÑπÔ∏è Workspace does not exist yet, skipping cleanup"
          fi