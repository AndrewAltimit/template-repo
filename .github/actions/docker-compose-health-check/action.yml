name: 'Docker Compose Health Check'
description: 'Start Docker Compose services and wait for them to be healthy'
inputs:
  services:
    description: 'Services to start (space-separated list, or empty for profile-based selection)'
    required: false
    default: ''
  profiles:
    description: 'Docker Compose profiles to activate (comma-separated)'
    required: false
    default: ''
  health-endpoint:
    description: 'Health check endpoint URL'
    required: false
    default: 'http://localhost:8005/health'
  timeout:
    description: 'Timeout in seconds'
    required: false
    default: '60'
  build:
    description: 'Whether to build images'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Pre-create output directories
      shell: bash
      run: |
        echo "üìÅ Creating output directories with proper permissions..."
        # Create directories that will be bind-mounted to avoid permission issues
        mkdir -p outputs/mcp-content outputs/mcp-gaea2
        # Ensure they're writable by the current user
        chmod -R 755 outputs/
        echo "‚úÖ Output directories created"

    - name: Set Docker Compose profiles
      shell: bash
      run: |
        if [ -n "${{ inputs.profiles }}" ]; then
          echo "üê≥ Setting Docker Compose profiles: ${{ inputs.profiles }}"
          echo "COMPOSE_PROFILES=${{ inputs.profiles }}" >> $GITHUB_ENV
        fi

    - name: Validate docker-compose configuration
      shell: bash
      run: |
        echo "üê≥ Validating docker-compose configuration..."
        docker-compose config

        # Check if any services will be started
        service_count=$(docker-compose config --services | wc -l)
        if [ "$service_count" -eq 0 ] && [ -z "${{ inputs.services }}" ]; then
          echo "‚ùå ERROR: No services selected!"
          echo "Either specify services explicitly or set profiles to activate services."
          echo "Available profiles in docker-compose.yml:"
          grep -E "^\s*profiles:" docker-compose.yml | sort -u || echo "No profiles found"
          exit 1
        fi

    - name: Start services
      shell: bash
      run: |
        if [ "${{ inputs.build }}" = "true" ]; then
          echo "üê≥ Building images and starting services..."
          if [ -n "${{ inputs.services }}" ]; then
            echo "Starting specific services: ${{ inputs.services }}"
            docker-compose up --build -d ${{ inputs.services }}
          else
            echo "Starting all services in active profiles"
            docker-compose up --build -d
          fi
        else
          echo "üê≥ Starting services..."
          if [ -n "${{ inputs.services }}" ]; then
            echo "Starting specific services: ${{ inputs.services }}"
            docker-compose up -d ${{ inputs.services }}
          else
            echo "Starting all services in active profiles"
            docker-compose up -d
          fi
        fi

    - name: Wait for services to be healthy
      shell: bash
      run: |
        echo "‚è≥ Waiting for services to be healthy..."
        timeout=${{ inputs.timeout }}
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          if curl -s ${{ inputs.health-endpoint }} > /dev/null 2>&1; then
            echo "‚úÖ Services are healthy!"
            break
          fi
          echo -n "."
          sleep 2
          elapsed=$((elapsed + 2))
        done

        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå Timeout waiting for services to be healthy"
          docker-compose ps
          docker-compose logs
          docker-compose down
          exit 1
        fi

        docker-compose ps

    - name: Clean up on failure
      if: failure()
      shell: bash
      run: |
        echo "üßπ Cleaning up services..."
        docker-compose down

    - name: Clean up output directories
      if: always()
      shell: bash
      run: |
        # Use the cleanup script that handles permissions properly
        if [ -f automation/ci-cd/cleanup-outputs.sh ]; then
          ./automation/ci-cd/cleanup-outputs.sh
        else
          echo "‚ö†Ô∏è  Cleanup script not found, skipping cleanup"
        fi
