#!/bin/bash
# Post-installation script for DBR environment
# Installs binary tools for Databricks Runtime

set -euo pipefail

VERSION="1.0.0"
DBR_VERSION=""
INSTALL_DIR="/usr/local/bin"
SKIP_CHECKSUMS=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Source checksum verification helper if available
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_DIR/verify-checksum.sh" ]; then
    # shellcheck source=/dev/null
    source "$SCRIPT_DIR/verify-checksum.sh"
    export CHECKSUMS_FILE="${SCRIPT_DIR}/../config/checksums.txt"
elif [ -f "/usr/local/bin/verify-checksum.sh" ]; then
    # shellcheck source=/dev/null
    source /usr/local/bin/verify-checksum.sh
    export CHECKSUMS_FILE="/opt/databricks/config/checksums.txt"
fi

# SHA256 Checksums for binary verification (fetched and computed from official sources)
# These are fallback checksums if the centralized checksums.txt is not available
declare -A CHECKSUMS_DBR15=(
    ["databricks_cli_0.245.0_linux_amd64.zip"]="43ff8feefbf7cc69b72c8118486c8b6fe5aba1a388197fd71bae3fc51b44105e"
    ["databricks_cli_0.245.0_linux_arm64.zip"]="eff6d54a9777231a95d041e8281dad99977692b46a4d7e7499c757f6bdbdb030"
    ["terraform_1.11.2_linux_amd64.zip"]="b94f7c5080196081ea5180e8512edd3c2037f28445ce3562cfb0adfd0aab64ca"
    ["terraform_1.11.2_linux_arm64.zip"]="1f162f947e346f75ac3f6ccfdf5e6910924839f688f0773de9a79bc2e0b4ca94"
    ["terragrunt_linux_amd64_0.77.0"]="2d865e72a9f7960823120bd5997b984b30c7f5085047387547bca5e848784d1f"
    ["terragrunt_linux_arm64_0.77.0"]="0ce83a03553f9210013930eff090b0ed68b93411ce064c6813caba5c43f96679"
)

declare -A CHECKSUMS_DBR16=(
    ["databricks_cli_0.256.0_linux_amd64.zip"]="fde4bcf58d6397f0cd4bbb23d227a0dd9b6e8dc3427acabfc0b351af03fedf37"
    ["databricks_cli_0.256.0_linux_arm64.zip"]="200ba568a59cb0c52acc75fc1f31fc59a19814ec36363f299920cba826eeb87f"
    ["terraform_1.12.2_linux_amd64.zip"]="1eaed12ca41fcfe094da3d76a7e9aa0639ad3409c43be0103ee9f5a1ff4b7437"
    ["terraform_1.12.2_linux_arm64.zip"]="f8a0347dc5e68e6d60a9fa2db361762e7943ed084a773f28a981d988ceb6fdc9"
    ["terragrunt_linux_amd64_0.81.10"]="1821248830c887d40a74a8d6916024b6de660aa61d35443101857a24a2f3bdb1"
    ["terragrunt_linux_arm64_0.81.10"]="a69b40723cc5210943eff6e22354105f129812f6817ea0d021af9c58ec61f38b"
)

# AWS CLI checksums (same for both DBR versions)
declare -A CHECKSUMS_AWS=(
    ["awscli-exe-linux-x86_64.zip"]="2f6f4c699f7c93bb2f19a8502bd945d243567d1dd95fb87397e3449204fd69cf"
    ["awscli-exe-linux-aarch64.zip"]="90ae801d74b99e7dc4efae10c6b4236555a6b58b8c7fb2c6d7f0b4c0a2582f76"
)

# Version mappings from reference implementations
declare -A TOOL_VERSIONS_DBR15=(
    ["databricks-cli"]="0.245.0"
    ["terraform"]="1.11.2"
    ["terragrunt"]="0.77.0"
)

declare -A TOOL_VERSIONS_DBR16=(
    ["databricks-cli"]="0.256.0"
    ["terraform"]="1.12.2"
    ["terragrunt"]="0.81.10"
)

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --version)
            DBR_VERSION="$2"
            shift 2
            ;;
        --install-dir)
            INSTALL_DIR="$2"
            shift 2
            ;;
        --skip-checksums)
            SKIP_CHECKSUMS=true
            shift
            ;;
        --help)
            echo "DBR Setup Post-Installation Script v${VERSION}"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --version VERSION    DBR version (dbr15 or dbr16)"
            echo "  --install-dir DIR    Installation directory (default: /usr/local/bin)"
            echo "  --skip-checksums     Skip checksum verification"
            echo "  --help              Show this help message"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            exit 1
            ;;
    esac
done

# Validate DBR version
if [ -z "$DBR_VERSION" ]; then
    echo -e "${RED}Error: DBR version not specified${NC}"
    echo "Use --version dbr15 or --version dbr16"
    exit 1
fi

if [[ "$DBR_VERSION" != "dbr15" && "$DBR_VERSION" != "dbr16" ]]; then
    echo -e "${RED}Error: Invalid DBR version: $DBR_VERSION${NC}"
    echo "Valid options: dbr15, dbr16"
    exit 1
fi

echo -e "${GREEN}DBR Setup Post-Installation Script v${VERSION}${NC}"
echo "Installing binary tools for $DBR_VERSION"
echo "Installation directory: $INSTALL_DIR"
echo ""

# Detect architecture
detect_arch() {
    local arch
    arch=$(uname -m)
    case $arch in
        x86_64)
            echo "amd64"
            ;;
        aarch64|arm64)
            echo "arm64"
            ;;
        *)
            echo -e "${RED}Error: Unsupported architecture: $arch${NC}"
            exit 1
            ;;
    esac
}

# Detect platform
detect_platform() {
    local platform
    platform=$(uname -s | tr '[:upper:]' '[:lower:]')
    echo "$platform"
}

ARCH=$(detect_arch)
PLATFORM=$(detect_platform)

# Verify checksum of downloaded file
verify_checksum() {
    local file="$1"
    local filename="$2"

    if [ "$SKIP_CHECKSUMS" = true ]; then
        echo -e "${YELLOW}⚠ Checksum verification skipped (--skip-checksums flag)${NC}"
        return 0
    fi

    local expected_hash=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        expected_hash="${CHECKSUMS_DBR15[$filename]:-}"
    else
        expected_hash="${CHECKSUMS_DBR16[$filename]:-}"
    fi

    # Check AWS CLI checksums (same for both DBR versions)
    if [ -z "$expected_hash" ]; then
        expected_hash="${CHECKSUMS_AWS[$filename]:-}"
    fi

    if [ -z "$expected_hash" ]; then
        echo -e "${YELLOW}⚠ No checksum available for $filename - skipping verification${NC}"
        echo -e "${YELLOW}  For production use, add checksums from official sources${NC}"
        return 0
    fi

    echo "Verifying checksum for $filename..."
    local actual_hash
    actual_hash=$(sha256sum "$file" | cut -d' ' -f1)

    if [ "$actual_hash" = "$expected_hash" ]; then
        echo -e "${GREEN}✓ Checksum verified${NC}"
        return 0
    else
        echo -e "${RED}✗ Checksum verification failed!${NC}"
        echo -e "${RED}  Expected: $expected_hash${NC}"
        echo -e "${RED}  Actual:   $actual_hash${NC}"
        echo -e "${RED}  This could indicate a corrupted download or supply chain attack${NC}"
        rm -f "$file"  # Remove potentially malicious file
        exit 1
    fi
}

# Install Databricks CLI
install_databricks_cli() {
    local version=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        version="${TOOL_VERSIONS_DBR15[databricks-cli]}"
    else
        version="${TOOL_VERSIONS_DBR16[databricks-cli]}"
    fi

    echo -e "${YELLOW}Installing Databricks CLI v${version}...${NC}"

    # Check if already installed with correct version
    if command -v databricks &> /dev/null; then
        local current_version
        current_version=$(databricks --version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        if [ "$current_version" = "$version" ]; then
            echo -e "${GREEN}✓ Databricks CLI v${version} already installed${NC}"
            return 0
        fi
    fi

    local filename="databricks_cli_${version}_${PLATFORM}_${ARCH}.zip"
    local url="https://github.com/databricks/cli/releases/download/v${version}/${filename}"

    echo "Downloading from: $url"
    if ! wget -q "$url" -O /tmp/databricks_cli.zip; then
        echo -e "${RED}Error: Failed to download Databricks CLI${NC}"
        exit 1
    fi

    # Verify checksum
    verify_checksum "/tmp/databricks_cli.zip" "$filename"

    # Extract and install
    unzip -q -o /tmp/databricks_cli.zip -d /tmp
    mkdir -p "$INSTALL_DIR"
    mv /tmp/databricks "$INSTALL_DIR/databricks"
    chmod +x "$INSTALL_DIR/databricks"
    rm -f /tmp/databricks_cli.zip

    # Verify installation
    if "$INSTALL_DIR/databricks" --version &> /dev/null; then
        echo -e "${GREEN}✓ Databricks CLI installed successfully${NC}"
    else
        echo -e "${RED}Error: Databricks CLI installation verification failed${NC}"
        exit 1
    fi
}

# Install Terraform
install_terraform() {
    local version=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        version="${TOOL_VERSIONS_DBR15[terraform]}"
    else
        version="${TOOL_VERSIONS_DBR16[terraform]}"
    fi

    echo -e "${YELLOW}Installing Terraform v${version}...${NC}"

    # Check if already installed with correct version
    if command -v terraform &> /dev/null; then
        local current_version
        current_version=$(terraform version 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        if [ "$current_version" = "$version" ]; then
            echo -e "${GREEN}✓ Terraform v${version} already installed${NC}"
            return 0
        fi
    fi

    local filename="terraform_${version}_${PLATFORM}_${ARCH}.zip"
    local url="https://releases.hashicorp.com/terraform/${version}/${filename}"

    echo "Downloading from: $url"
    if ! curl -sL "$url" -o /tmp/terraform.zip; then
        echo -e "${RED}Error: Failed to download Terraform${NC}"
        exit 1
    fi

    # Verify checksum
    verify_checksum "/tmp/terraform.zip" "$filename"

    # Extract and install
    unzip -q -o /tmp/terraform.zip terraform -d /tmp
    mkdir -p "$INSTALL_DIR"
    mv /tmp/terraform "$INSTALL_DIR/terraform"
    chmod +x "$INSTALL_DIR/terraform"
    rm -f /tmp/terraform.zip /tmp/LICENSE.txt 2>/dev/null || true

    # Verify installation
    if "$INSTALL_DIR/terraform" version &> /dev/null; then
        echo -e "${GREEN}✓ Terraform installed successfully${NC}"
    else
        echo -e "${RED}Error: Terraform installation verification failed${NC}"
        exit 1
    fi
}

# Install Terragrunt
install_terragrunt() {
    local version=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        version="v${TOOL_VERSIONS_DBR15[terragrunt]}"
    else
        version="v${TOOL_VERSIONS_DBR16[terragrunt]}"
    fi

    echo -e "${YELLOW}Installing Terragrunt ${version}...${NC}"

    # Check if already installed with correct version
    if command -v terragrunt &> /dev/null; then
        local current_version
        current_version=$(terragrunt --version 2>&1 | grep -oE 'v?[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        if [ "$current_version" = "$version" ] || [ "v$current_version" = "$version" ]; then
            echo -e "${GREEN}✓ Terragrunt ${version} already installed${NC}"
            return 0
        fi
    fi

    local filename="terragrunt_${PLATFORM}_${ARCH}_${version#v}"
    local url="https://github.com/gruntwork-io/terragrunt/releases/download/${version}/terragrunt_${PLATFORM}_${ARCH}"

    echo "Downloading from: $url"
    if ! curl -sL "$url" -o /tmp/terragrunt; then
        echo -e "${RED}Error: Failed to download Terragrunt${NC}"
        exit 1
    fi

    # Verify checksum
    verify_checksum "/tmp/terragrunt" "$filename"

    # Install
    mkdir -p "$INSTALL_DIR"
    mv /tmp/terragrunt "$INSTALL_DIR/terragrunt"
    chmod +x "$INSTALL_DIR/terragrunt"

    # Verify installation
    if "$INSTALL_DIR/terragrunt" --version &> /dev/null; then
        echo -e "${GREEN}✓ Terragrunt installed successfully${NC}"
    else
        echo -e "${RED}Error: Terragrunt installation verification failed${NC}"
        exit 1
    fi
}

# Install AWS CLI
install_aws_cli() {
    echo -e "${YELLOW}Installing AWS CLI...${NC}"

    # Check if already installed
    if command -v aws &> /dev/null; then
        echo -e "${GREEN}✓ AWS CLI already installed${NC}"
        aws --version
        return 0
    fi

    if [ "$PLATFORM" = "linux" ]; then
        local aws_arch="x86_64"
        if [ "$ARCH" = "arm64" ]; then
            aws_arch="aarch64"
        fi

        local filename="awscli-exe-linux-${aws_arch}.zip"
        echo "Downloading AWS CLI for Linux ${aws_arch}..."
        if ! curl -sL "https://awscli.amazonaws.com/${filename}" -o /tmp/awscliv2.zip; then
            echo -e "${RED}Error: Failed to download AWS CLI${NC}"
            exit 1
        fi

        # Verify checksum
        verify_checksum "/tmp/awscliv2.zip" "$filename"

        # Extract and install
        unzip -q /tmp/awscliv2.zip -d /tmp

        # Check if we can write to the install directory
        if [ -w "$INSTALL_DIR" ]; then
            /tmp/aws/install --install-dir /usr/local/aws-cli --bin-dir "$INSTALL_DIR" 2>/dev/null || {
                echo -e "${YELLOW}Warning: AWS CLI installation requires sudo privileges${NC}"
                echo "Run: sudo /tmp/aws/install --install-dir /usr/local/aws-cli --bin-dir $INSTALL_DIR"
                echo "Skipping AWS CLI installation..."
            }
        else
            echo -e "${YELLOW}Warning: Cannot write to $INSTALL_DIR${NC}"
            echo "AWS CLI installation requires sudo privileges"
            echo "Run: sudo /tmp/aws/install --install-dir /usr/local/aws-cli --bin-dir $INSTALL_DIR"
            echo "Skipping AWS CLI installation..."
        fi

        rm -rf /tmp/awscliv2.zip /tmp/aws 2>/dev/null || true

    elif [ "$PLATFORM" = "darwin" ]; then
        echo "For macOS, please download and install AWS CLI from:"
        echo "https://awscli.amazonaws.com/AWSCLIV2.pkg"
        echo "Or install via Homebrew: brew install awscli"
    fi

    # Verify if installation succeeded
    if command -v aws &> /dev/null; then
        echo -e "${GREEN}✓ AWS CLI installed successfully${NC}"
    else
        echo -e "${YELLOW}⚠ AWS CLI not installed (may require manual installation)${NC}"
    fi
}

# Install UV (optional, for faster Python package management)
install_uv() {
    local version=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        version="0.6.12"
    else
        version="0.7.14"
    fi

    echo -e "${YELLOW}Installing UV v${version} (optional)...${NC}"

    # Check if already installed
    if command -v uv &> /dev/null; then
        echo -e "${GREEN}✓ UV already installed${NC}"
        return 0
    fi

    # Install using the official installer
    if command -v curl &> /dev/null; then
        curl -LsSf "https://github.com/astral-sh/uv/releases/download/${version}/uv-installer.sh" | sh 2>/dev/null || {
            echo -e "${YELLOW}⚠ UV installation skipped (optional tool)${NC}"
        }
    else
        echo -e "${YELLOW}⚠ UV installation skipped - curl not available${NC}"
    fi
}

# Main execution
main() {
    # Check if install directory is writable
    if [ ! -w "$INSTALL_DIR" ] && [ "$INSTALL_DIR" = "/usr/local/bin" ]; then
        echo -e "${YELLOW}Warning: $INSTALL_DIR is not writable${NC}"
        echo "You may need to run this script with sudo, or specify a different --install-dir"
        echo ""
    fi

    # Create install directory if it doesn't exist
    mkdir -p "$INSTALL_DIR" 2>/dev/null || {
        echo -e "${YELLOW}Cannot create $INSTALL_DIR - you may need sudo privileges${NC}"
    }

    # Install tools
    install_databricks_cli
    install_terraform
    install_terragrunt
    install_aws_cli
    install_uv

    echo ""
    echo -e "${GREEN}✓ Binary tools installation complete!${NC}"
    echo ""

    # Add to PATH if needed
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo -e "${YELLOW}Note: $INSTALL_DIR is not in your PATH${NC}"
        echo "Add it to your PATH by adding this line to your shell profile:"
        echo "  export PATH=\"$INSTALL_DIR:\$PATH\""
    fi

    echo ""
    echo "Next step:"
    echo "  Run validation: dbr-validate --version $DBR_VERSION"
}

# Run main function
main
