#!/bin/bash
# Validation script for DBR environment setup

set -euo pipefail

VERSION="1.0.0"
DBR_VERSION="dbr15"
JSON_OUTPUT=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --version)
            DBR_VERSION="$2"
            shift 2
            ;;
        --json)
            JSON_OUTPUT=true
            shift
            ;;
        --help)
            echo "DBR Environment Validation Script v${VERSION}"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --version VERSION    DBR version to validate (dbr15 or dbr16)"
            echo "  --json              Output results as JSON"
            echo "  --help              Show this help message"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            exit 1
            ;;
    esac
done

# Validate DBR version
if [[ "$DBR_VERSION" != "dbr15" && "$DBR_VERSION" != "dbr16" ]]; then
    echo -e "${RED}Error: Invalid DBR version: $DBR_VERSION${NC}"
    echo "Valid options: dbr15, dbr16"
    exit 1
fi

# Expected versions
declare -A EXPECTED_VERSIONS
if [ "$DBR_VERSION" = "dbr15" ]; then
    EXPECTED_VERSIONS=(
        ["python"]="3.11"
        ["java"]="17"
        ["databricks-cli"]="0.245.0"
        ["terraform"]="1.11.2"
        ["terragrunt"]="0.77.0"
        ["pandas"]="1.5.3"
        ["numpy"]="1.23.5"
        ["pyspark"]="3.5.0"
        ["scikit-learn"]="1.3.0"
        ["mlflow-skinny"]="2.11.4"
    )
else
    EXPECTED_VERSIONS=(
        ["python"]="3.12"
        ["java"]="17"
        ["databricks-cli"]="0.256.0"
        ["terraform"]="1.12.2"
        ["terragrunt"]="0.81.10"
        ["pandas"]="1.5.3"
        ["numpy"]="1.26.4"
        ["pyspark"]="3.5.0"
        ["scikit-learn"]="1.4.2"
        ["mlflow-skinny"]="2.19.0"
    )
fi

# Results storage
declare -a RESULTS
TOTAL_CHECKS=0
PASSED_CHECKS=0

# Add result to array
add_result() {
    local component="$1"
    local expected="$2"
    local actual="$3"
    local status="$4"

    RESULTS+=("{\"component\":\"$component\",\"expected\":\"$expected\",\"actual\":\"$actual\",\"status\":\"$status\"}")
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

    if [ "$status" = "pass" ]; then
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    fi
}

# Check Python version
check_python() {
    local expected="${EXPECTED_VERSIONS[python]}"
    local actual="Not installed"
    local status="fail"

    if command -v python3 &> /dev/null; then
        actual=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")' 2>/dev/null || echo "Error")
        if [ "$actual" = "$expected" ]; then
            status="pass"
        fi
    fi

    add_result "Python" "$expected" "$actual" "$status"
}

# Check Java version
check_java() {
    local expected="${EXPECTED_VERSIONS[java]}"
    local actual="Not installed"
    local status="fail"

    if command -v java &> /dev/null; then
        local version_output=$(java -version 2>&1)
        if echo "$version_output" | grep -q "version \"17"; then
            actual="17"
            status="pass"
        elif echo "$version_output" | grep -q "version \"1.17"; then
            actual="17"
            status="pass"
        else
            actual=$(echo "$version_output" | grep -oE 'version "[0-9]+' | grep -oE '[0-9]+' | head -1)
        fi
    fi

    add_result "Java" "$expected" "$actual" "$status"
}

# Check binary tool
check_tool() {
    local tool_name="$1"
    local command_name="$2"
    local version_flag="$3"
    local expected="${EXPECTED_VERSIONS[$tool_name]}"
    local actual="Not installed"
    local status="fail"

    if command -v "$command_name" &> /dev/null; then
        local version_output=$("$command_name" "$version_flag" 2>&1 || true)

        case "$tool_name" in
            "databricks-cli")
                actual=$(echo "$version_output" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
                ;;
            "terraform")
                actual=$(echo "$version_output" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
                ;;
            "terragrunt")
                actual=$(echo "$version_output" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
                ;;
        esac

        if [ "$actual" = "$expected" ]; then
            status="pass"
        fi
    fi

    add_result "$tool_name" "$expected" "$actual" "$status"
}

# Check Python package
check_python_package() {
    local package="$1"
    local expected="${EXPECTED_VERSIONS[$package]}"
    local actual="Not installed"
    local status="fail"

    if command -v python3 &> /dev/null; then
        actual=$(python3 -c "
try:
    import importlib.metadata
    print(importlib.metadata.version('$package'))
except:
    try:
        import pkg_resources
        print(pkg_resources.get_distribution('$package').version)
    except:
        print('Not installed')
" 2>/dev/null || echo "Not installed")

        if [ "$actual" = "$expected" ]; then
            status="pass"
        fi
    fi

    add_result "$package" "$expected" "$actual" "$status"
}

# Output results in table format
output_table() {
    echo ""
    echo -e "${BLUE}DBR Environment Validation - $DBR_VERSION${NC}"
    echo "============================================================"
    printf "%-20s %-15s %-15s %-10s\n" "Component" "Expected" "Actual" "Status"
    echo "------------------------------------------------------------"

    for result in "${RESULTS[@]}"; do
        # Parse JSON manually (bash doesn't have native JSON parsing)
        local component=$(echo "$result" | sed 's/.*"component":"\([^"]*\)".*/\1/')
        local expected=$(echo "$result" | sed 's/.*"expected":"\([^"]*\)".*/\1/')
        local actual=$(echo "$result" | sed 's/.*"actual":"\([^"]*\)".*/\1/')
        local status=$(echo "$result" | sed 's/.*"status":"\([^"]*\)".*/\1/')

        if [ "$status" = "pass" ]; then
            status_symbol="${GREEN}✓${NC}"
        else
            status_symbol="${RED}✗${NC}"
        fi

        printf "%-20s %-15s %-15s %b\n" "$component" "$expected" "$actual" "$status_symbol"
    done

    echo "------------------------------------------------------------"
    echo ""

    if [ "$PASSED_CHECKS" -eq "$TOTAL_CHECKS" ]; then
        echo -e "${GREEN}✓ All checks passed! ($PASSED_CHECKS/$TOTAL_CHECKS)${NC}"
        echo -e "${GREEN}Environment validated successfully!${NC}"
    else
        echo -e "${YELLOW}⚠ Some checks failed: $PASSED_CHECKS/$TOTAL_CHECKS passed${NC}"
        echo -e "${YELLOW}Please install missing components.${NC}"
    fi
    echo ""
}

# Output results in JSON format
output_json() {
    local success="false"
    if [ "$PASSED_CHECKS" -eq "$TOTAL_CHECKS" ]; then
        success="true"
    fi

    echo "{"
    echo "  \"dbr_version\": \"$DBR_VERSION\","
    echo "  \"results\": ["

    local first=true
    for result in "${RESULTS[@]}"; do
        if [ "$first" = true ]; then
            first=false
        else
            echo ","
        fi
        echo -n "    $result"
    done

    echo ""
    echo "  ],"
    echo "  \"summary\": {"
    echo "    \"total\": $TOTAL_CHECKS,"
    echo "    \"passed\": $PASSED_CHECKS,"
    echo "    \"failed\": $((TOTAL_CHECKS - PASSED_CHECKS)),"
    echo "    \"success\": $success"
    echo "  }"
    echo "}"
}

# Main validation
main() {
    # System checks
    check_python
    check_java

    # Binary tools
    check_tool "databricks-cli" "databricks" "--version"
    check_tool "terraform" "terraform" "version"
    check_tool "terragrunt" "terragrunt" "--version"

    # Python packages (core)
    check_python_package "pandas"
    check_python_package "numpy"
    check_python_package "pyspark"

    # Python packages (ML)
    check_python_package "scikit-learn"
    check_python_package "mlflow-skinny"

    # Output results
    if [ "$JSON_OUTPUT" = true ]; then
        output_json
    else
        output_table
    fi

    # Exit code
    if [ "$PASSED_CHECKS" -eq "$TOTAL_CHECKS" ]; then
        exit 0
    else
        exit 1
    fi
}

# Run main function
main
