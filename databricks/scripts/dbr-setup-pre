#!/bin/bash
# Pre-installation script for DBR environment
# Installs system dependencies required for Databricks Runtime

set -euo pipefail

VERSION="1.0.0"
DBR_VERSION=""
PLATFORM=""
NON_INTERACTIVE=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --version)
            DBR_VERSION="$2"
            shift 2
            ;;
        --platform)
            PLATFORM="$2"
            shift 2
            ;;
        --non-interactive)
            NON_INTERACTIVE=true
            shift
            ;;
        --help)
            echo "DBR Setup Pre-Installation Script v${VERSION}"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --version VERSION    DBR version (dbr15 or dbr16)"
            echo "  --platform PLATFORM  Platform (linux or darwin)"
            echo "  --non-interactive    Run without prompts"
            echo "  --help              Show this help message"
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            exit 1
            ;;
    esac
done

# Detect platform if not specified
if [ -z "$PLATFORM" ]; then
    PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
fi

# Validate DBR version
if [ -z "$DBR_VERSION" ]; then
    echo -e "${RED}Error: DBR version not specified${NC}"
    echo "Use --version dbr15 or --version dbr16"
    exit 1
fi

if [[ "$DBR_VERSION" != "dbr15" && "$DBR_VERSION" != "dbr16" ]]; then
    echo -e "${RED}Error: Invalid DBR version: $DBR_VERSION${NC}"
    echo "Valid options: dbr15, dbr16"
    exit 1
fi

echo -e "${GREEN}DBR Setup Pre-Installation Script v${VERSION}${NC}"
echo "Installing system dependencies for $DBR_VERSION on $PLATFORM"
echo ""

# Install Java 17 (required for PySpark)
install_java() {
    echo -e "${YELLOW}Installing Java 17...${NC}"

    if [ "$PLATFORM" = "linux" ]; then
        if command -v apt-get &> /dev/null; then
            # Debian/Ubuntu
            if [ "$NON_INTERACTIVE" = true ]; then
                export DEBIAN_FRONTEND=noninteractive
            fi

            # Check if Java 17 is already installed
            if java -version 2>&1 | grep -q "version \"17"; then
                echo -e "${GREEN}✓ Java 17 already installed${NC}"
                return 0
            fi

            echo "Installing OpenJDK 17 via apt..."
            apt-get update
            apt-get install -y openjdk-17-jdk-headless

            # Configure certificates for Java
            if [ -f /var/lib/dpkg/info/ca-certificates-java.postinst ]; then
                /var/lib/dpkg/info/ca-certificates-java.postinst configure || true
            fi

        elif command -v yum &> /dev/null; then
            # RHEL/CentOS
            if java -version 2>&1 | grep -q "version \"17"; then
                echo -e "${GREEN}✓ Java 17 already installed${NC}"
                return 0
            fi

            echo "Installing OpenJDK 17 via yum..."
            yum install -y java-17-openjdk-headless

        elif command -v dnf &> /dev/null; then
            # Fedora
            if java -version 2>&1 | grep -q "version \"17"; then
                echo -e "${GREEN}✓ Java 17 already installed${NC}"
                return 0
            fi

            echo "Installing OpenJDK 17 via dnf..."
            dnf install -y java-17-openjdk-headless

        else
            echo -e "${RED}Error: Unsupported Linux distribution${NC}"
            echo "Please install Java 17 manually"
            exit 1
        fi

    elif [ "$PLATFORM" = "darwin" ]; then
        # macOS
        if java -version 2>&1 | grep -q "version \"17"; then
            echo -e "${GREEN}✓ Java 17 already installed${NC}"
            return 0
        fi

        if command -v brew &> /dev/null; then
            echo "Installing OpenJDK 17 via Homebrew..."
            brew install openjdk@17

            # Link Java 17
            brew link --force openjdk@17
        else
            echo -e "${RED}Error: Homebrew not found${NC}"
            echo "Please install Homebrew first: https://brew.sh"
            exit 1
        fi
    else
        echo -e "${RED}Error: Unsupported platform: $PLATFORM${NC}"
        exit 1
    fi

    # Verify Java installation
    if java -version 2>&1 | grep -q "version \"17"; then
        echo -e "${GREEN}✓ Java 17 installed successfully${NC}"
    else
        echo -e "${RED}Error: Java 17 installation failed${NC}"
        exit 1
    fi
}

# Install system packages
install_system_packages() {
    echo -e "${YELLOW}Installing system packages...${NC}"

    if [ "$PLATFORM" = "linux" ]; then
        if command -v apt-get &> /dev/null; then
            # Debian/Ubuntu
            if [ "$NON_INTERACTIVE" = true ]; then
                export DEBIAN_FRONTEND=noninteractive
            fi

            echo "Installing packages via apt..."
            apt-get update
            apt-get install -y \
                wget \
                curl \
                unzip \
                zip \
                jq \
                git \
                build-essential \
                python3-dev

        elif command -v yum &> /dev/null; then
            # RHEL/CentOS
            echo "Installing packages via yum..."
            yum install -y \
                wget \
                curl \
                unzip \
                zip \
                jq \
                git \
                gcc \
                gcc-c++ \
                python3-devel

        elif command -v dnf &> /dev/null; then
            # Fedora
            echo "Installing packages via dnf..."
            dnf install -y \
                wget \
                curl \
                unzip \
                zip \
                jq \
                git \
                gcc \
                gcc-c++ \
                python3-devel

        else
            echo -e "${RED}Error: Unsupported Linux distribution${NC}"
            exit 1
        fi

    elif [ "$PLATFORM" = "darwin" ]; then
        # macOS
        if command -v brew &> /dev/null; then
            echo "Installing packages via Homebrew..."
            brew install wget curl jq git
        else
            echo -e "${RED}Error: Homebrew not found${NC}"
            echo "Please install Homebrew first: https://brew.sh"
            exit 1
        fi
    fi

    echo -e "${GREEN}✓ System packages installed successfully${NC}"
}

# Check Python version
check_python_version() {
    echo -e "${YELLOW}Checking Python version...${NC}"

    local required_python=""
    if [ "$DBR_VERSION" = "dbr15" ]; then
        required_python="3.11"
    else
        required_python="3.12"
    fi

    if command -v python3 &> /dev/null; then
        local python_version=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')

        if [ "$python_version" = "$required_python" ]; then
            echo -e "${GREEN}✓ Python $required_python found${NC}"
        else
            echo -e "${YELLOW}Warning: Python $required_python required, but $python_version found${NC}"
            echo "Consider using pyenv or conda to install Python $required_python"
        fi
    else
        echo -e "${RED}Error: Python 3 not found${NC}"
        echo "Please install Python $required_python"
        exit 1
    fi
}

# Main execution
main() {
    # Check if running as root (for system packages)
    if [ "$PLATFORM" = "linux" ] && [ "$EUID" -ne 0 ] && [ "$NON_INTERACTIVE" = false ]; then
        echo -e "${YELLOW}Warning: This script may require sudo privileges to install system packages${NC}"
        echo "Press Ctrl+C to cancel or Enter to continue..."
        read -r
    fi

    # Install components
    install_java
    install_system_packages
    check_python_version

    echo ""
    echo -e "${GREEN}✓ System dependencies installation complete!${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Install Python packages: pip install dbr-env-all[$DBR_VERSION]"
    echo "2. Install binary tools: ./dbr-setup-post --version $DBR_VERSION"
    echo "3. Validate installation: dbr-validate --version $DBR_VERSION"
}

# Run main function
main
