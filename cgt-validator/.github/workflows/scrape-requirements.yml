name: Scrape State Requirements

on:
  schedule:
    # Run weekly on Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      state:
        description: 'State to scrape (leave empty for all)'
        required: false
        type: string

jobs:
  scrape:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        state: [oregon, massachusetts, rhode_island, washington, delaware, connecticut, vermont, colorado]

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-cgt.txt
        pip install -e .

    - name: Scrape requirements for ${{ matrix.state }}
      if: ${{ github.event.inputs.state == '' || github.event.inputs.state == matrix.state }}
      run: |
        echo "Scraping requirements for ${{ matrix.state }}..."
        python -m src.scrapers.web_scraper ${{ matrix.state }}
        python -m src.scrapers.document_downloader ${{ matrix.state }}

    - name: Parse downloaded requirements
      if: ${{ github.event.inputs.state == '' || github.event.inputs.state == matrix.state }}
      run: |
        echo "Parsing requirements for ${{ matrix.state }}..."
        python -c "
        from pathlib import Path
        from src.parsers.requirements_parser import RequirementsParser
        from src.scrapers.document_downloader import DocumentDownloader

        state = '${{ matrix.state }}'
        downloader = DocumentDownloader(state)
        latest_docs = downloader.get_latest_documents()

        parser = RequirementsParser(state)
        for doc_type, doc_path in latest_docs.items():
            if doc_path.exists():
                print(f'Parsing {doc_path}...')
                try:
                    requirements = parser.parse_document(doc_path)
                    parser.save_requirements(requirements, f'{state}_{doc_type}_requirements.json')
                except Exception as e:
                    print(f'Error parsing {doc_path}: {e}')
        "

    - name: Check for changes
      id: check_changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update ${{ matrix.state }} requirements"
        title: "Update ${{ matrix.state }} Requirements"
        body: |
          ## Automated Requirements Update

          This PR contains updated requirements for **${{ matrix.state }}** scraped on ${{ github.event.repository.updated_at }}.

          ### Changes
          - Updated document downloads
          - Parsed latest requirements
          - Generated new validation rules

          Please review the changes and merge if appropriate.
        branch: update-requirements-${{ matrix.state }}-${{ github.run_number }}
        delete-branch: true
        labels: |
          automated
          requirements-update

  summary:
    runs-on: ubuntu-latest
    needs: scrape
    if: always()

    steps:
    - name: Generate summary
      run: |
        echo "# Requirements Scraping Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scraping workflow completed at $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## States Processed" >> $GITHUB_STEP_SUMMARY
        echo "- Oregon" >> $GITHUB_STEP_SUMMARY
        echo "- Massachusetts" >> $GITHUB_STEP_SUMMARY
        echo "- Rhode Island" >> $GITHUB_STEP_SUMMARY
        echo "- Washington" >> $GITHUB_STEP_SUMMARY
        echo "- Delaware" >> $GITHUB_STEP_SUMMARY
        echo "- Connecticut" >> $GITHUB_STEP_SUMMARY
        echo "- Vermont" >> $GITHUB_STEP_SUMMARY
        echo "- Colorado" >> $GITHUB_STEP_SUMMARY
