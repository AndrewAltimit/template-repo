name: CGT Validator CI

on:
  push:
    branches: ['**']  # Run on all branches
  pull_request:
    branches: ['**']
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION_DEFAULT: "3.11"

jobs:
  # Pre-commit hooks check
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-
            pre-commit-

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure
        continue-on-error: true

  # Test on multiple Python versions
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        include:
          # Also test on Windows and macOS with default Python
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('requirements-cgt.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cgt.txt
          pip install -e .

      - name: Run unit tests
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          pytest tests/validators/test_base_validator.py -v
          pytest tests/validators/test_oregon_validator.py -v

      - name: Run reporter tests
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          pytest tests/reporters/ -v

      - name: Run scraper tests
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          pytest tests/scrapers/ -v

      - name: Run CLI tests
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          pytest tests/test_cli.py -v

      - name: Run integration tests
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          python test_oregon.py
          python test_validation_demo.py

  # Comprehensive test coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-coverage-${{ hashFiles('requirements-cgt.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-coverage-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cgt.txt
          pip install pytest-cov coverage[toml]
          pip install -e .

      - name: Run tests with coverage
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: safety check -r requirements-cgt.txt --json
        continue-on-error: true

      - name: Run Bandit
        run: bandit -r src -f json -o bandit-report.json
        continue-on-error: true

  # Docker build test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: cgt-validator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm cgt-validator:test cgt-validate --help

      - name: Run Docker Compose tests
        run: |
          docker-compose run --rm cgt-test
        continue-on-error: true

  # Performance benchmarks
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cgt.txt
          pip install pytest-benchmark memory_profiler
          pip install -e .

      - name: Run benchmarks
        run: |
          export PYTHONPATH=${{ github.workspace }}/src:$PYTHONPATH
          # Create a simple benchmark test
          cat > test_benchmark.py << 'EOF'
          import pytest
          from src.validators.oregon import OregonValidator
          from src.mock_data.oregon_generator import generate_mock_submission

          def test_validation_performance(benchmark):
              # Generate test data
              test_file = generate_mock_submission("./test_data.xlsx", include_optional=False)
              validator = OregonValidator()

              # Benchmark the validation
              result = benchmark(validator.validate_file, str(test_file))
              assert result is not None
          EOF

          pytest test_benchmark.py -v --benchmark-only --benchmark-columns=min,max,mean,stddev

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser

      - name: Check documentation
        run: |
          # Verify all markdown files are valid
          find docs -name "*.md" -exec python -m markdown {} \; > /dev/null

  # Final status check
  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [pre-commit, test, coverage, security, docker, benchmark, docs]
    if: always()
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "All critical checks passed!"
