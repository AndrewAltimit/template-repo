[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cgt-validator"
version = "0.1.0"
description = "Health Cost Growth Target data validation tool for multiple US states"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    {name = "CGT Validator Team", email = "cgt-validator@example.com"}
]
keywords = ["healthcare", "validation", "data-quality", "cgt", "cost-growth-target"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dynamic = ["dependencies"]

[project.urls]
Homepage = "https://github.com/your-org/cgt-validator"
Documentation = "https://github.com/your-org/cgt-validator/docs"
Repository = "https://github.com/your-org/cgt-validator"
Issues = "https://github.com/your-org/cgt-validator/issues"

[project.scripts]
cgt-validate = "cli:main"
cgt-scrape = "scrapers.web_scraper:scrape_state"
cgt-scheduler = "scrapers.scheduler:main"

[tool.setuptools]
packages = {find = {where = ["src"]}}
py-modules = ["cli"]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
dependencies = {file = ["requirements-cgt.txt"]}

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pylint.messages_control]
disable = "C,R"
max-line-length = 120

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", "*.egg"]

# Development dependencies (for reference - not used by pip)
[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pylint>=3.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-watch>=4.2.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
]
notebook = [
    "jupyter>=1.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
]
